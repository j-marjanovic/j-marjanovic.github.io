<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>j-marjanovic.io - Projects</title><link href="www.j-marjanovic.io/" rel="alternate"></link><link href="www.j-marjanovic.io/feeds/projects.atom.xml" rel="self"></link><id>www.j-marjanovic.io/</id><updated>2016-10-18T23:00:00+02:00</updated><entry><title>Books read: E. Stavinov: 100 Power Tips for FPGA Designers</title><link href="www.j-marjanovic.io/books-read-e-stavinov-100-power-tips-for-fpga-designers.html" rel="alternate"></link><published>2016-10-18T23:00:00+02:00</published><updated>2016-10-18T23:00:00+02:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2016-10-18:www.j-marjanovic.io/books-read-e-stavinov-100-power-tips-for-fpga-designers.html</id><summary type="html">&lt;p&gt;I recently found a great book explaining in details FPGA workflow for Xilinx
tools, titled 100 Power Tips for FPGA Designers. &lt;a href="http://www.outputlogic.com"&gt;Evgeni
Stavinov&lt;/a&gt; is an experienced FPGA designer who
previously worked for Xilinx. It is not evident from the title, but this book
focuses almost entirely on the Xilinx, while â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently found a great book explaining in details FPGA workflow for Xilinx
tools, titled 100 Power Tips for FPGA Designers. &lt;a href="http://www.outputlogic.com"&gt;Evgeni
Stavinov&lt;/a&gt; is an experienced FPGA designer who
previously worked for Xilinx. It is not evident from the title, but this book
focuses almost entirely on the Xilinx, while Altera, Lattice and Microsemi are
mentioned just briefly in an FPGA vendor list and every once in a while. Due
to a fast-paced development of the FPGAs and corresponding tools, it is clear
that a book from 2011 would be slightly outdated in 2016. Most notable change
in the previous years was a new software suite from Xilinx, called Vivado and
the slow introduction of C-to-FPGA tools, such as Vivado HLS.&lt;/p&gt;
&lt;p style="width:70%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Evgeni Stavinov: 100 Power Tips for FPGA Designers" src="www.j-marjanovic.io/images/100_power_tips_fpga_designers.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nonetheless, this book is ideal for somebody who already has some (formal)
education about the FPGA but lacks the real world experience. The author
manages to touch every aspect of the FPGA design, from device selection,
simulation, coding, debugging, communication protocols, FPGA board bring-up
and all small details one should know about FPGAs.&lt;/p&gt;
&lt;p&gt;The book (as the title suggest is organized into 100 tips). Here are my
notes and comments to some tips this book provides.&lt;/p&gt;
&lt;h3&gt;Tip 9&lt;/h3&gt;
&lt;p&gt;The FPGA field has seen some new tools emerge in the past few years, while
some other tools ceased to exist or were integrated in other software suites.
Under &lt;strong&gt;Lint tools&lt;/strong&gt; should definitely be added &lt;em&gt;Sigasi Editor&lt;/em&gt;, an Eclipse
based editor for VHDL and Verilog. &lt;strong&gt;Verilator&lt;/strong&gt; is a cycle based simulator,
since it can be used as a linter (&lt;code&gt;--lint-only&lt;/code&gt;) it should be also added on
this list.&lt;/p&gt;
&lt;p&gt;Another interesting tool worth mentioning is &lt;strong&gt;Doxygen&lt;/strong&gt; which can create the
documentation from the comments in the code and other Markdown documents. The
original program does not support Verilog, but there is a fork &lt;strong&gt;Doxverilog&lt;/strong&gt;
which also adds a support for Verilog.&lt;/p&gt;
&lt;h3&gt;Tip 15&lt;/h3&gt;
&lt;p&gt;This tip states that &lt;code&gt;initial&lt;/code&gt; block are ignored by FPGA synthesis tools. This
probably a feature which was added after the release of the book, but both XST
in ISE 14.7
(http://www.xilinx.com/support/documentation/sw_manuals/xilinx14_7/xst.pdf)
and Vivado Synthesis
(http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_2/ug901-vivado-synthesis.pdf)
now support initialization of the register from &lt;code&gt;initial&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;Vivado Synthesis Guidelines go even further and suggest using &lt;code&gt;inital&lt;/code&gt; instead
of reset:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Avoid operational set/reset logic whenever possible. There may be other,
less expensive, ways to achieve the desired effect, such as taking
advantage of the circuit global reset by defining an initial content.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Tip #18&lt;/h2&gt;
&lt;p&gt;A small typo on page 81, in SystemVerilog &lt;code&gt;logic&lt;/code&gt; is a 4-state type which
should replace &lt;code&gt;reg&lt;/code&gt;, especcialy in cases in which &lt;code&gt;reg&lt;/code&gt; keyword may cause a
confusion (e.g. &lt;code&gt;always_comb&lt;/code&gt; block).&lt;/p&gt;
&lt;h2&gt;Tip #19&lt;/h2&gt;
&lt;p&gt;While mentioning code editors for Verilog and VHDL it should be worth
mentioning that the one integrated in Xilinx and Altera tools are complete
garbage. Vivado did not even had a auto-complete until 2016!&lt;/p&gt;
&lt;p&gt;The list of code editors could also be extended with &lt;strong&gt;Sublime Text&lt;/strong&gt; and
&lt;strong&gt;Atom Editor&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Tip #22&lt;/h2&gt;
&lt;p&gt;This tip discusses meta-stability and data-coherency on clock-domain crossing
logic. It would probably be a good idea to also mention how to proceed when a
state machine transitions are controlled with asynchronous signals. This is
similar problem to data coherency, all input signals should be re-sampled to
the state machine clock domain before they are connected to state-transition
logic. Otherwise it is possible for state machine to enter illegal states due
to different delays from IO pins to registers.&lt;/p&gt;
&lt;h2&gt;Tip #26&lt;/h2&gt;
&lt;p&gt;A small typo on page 124, the last line of code example for shift registers
should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;initial&lt;/span&gt; &lt;span class="n"&gt;shift4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// result is 8&amp;#39;hE0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that result after shift operation should be 8'hE0 (-32) instead of 8'h0E.&lt;/p&gt;
&lt;h2&gt;Tip #27&lt;/h2&gt;
&lt;p&gt;I was always wondering if a state machine which has a transition from
&lt;code&gt;default&lt;/code&gt; case defined is equivalent to state machine generated with
&lt;code&gt;-safe_implementation&lt;/code&gt; switch.&lt;/p&gt;
&lt;h2&gt;Tip #29&lt;/h2&gt;
&lt;p&gt;I enjoyed the discussion about various reset mechanism. When I stared
developing with FPGAs I always started writing process blocks the same way
(&lt;code&gt;if !reset_n init_regs_to_something else my_logic_here&lt;/code&gt;) not realizing that
often a reset is not needed. This is especially true in data-processing
pipelines.&lt;/p&gt;
&lt;h2&gt;Tip #34&lt;/h2&gt;
&lt;p&gt;When initializing Block RAM I would suggest using &lt;code&gt;readmemb&lt;/code&gt; and &lt;code&gt;readmemh&lt;/code&gt;
system calls instead of proposed Xilinx custom format, since &lt;code&gt;readmemb&lt;/code&gt; and 
&lt;code&gt;readmemh&lt;/code&gt; work also for simulation.&lt;/p&gt;
&lt;h2&gt;Tips #45-#55&lt;/h2&gt;
&lt;p&gt;These tips discuss ASIC prototyping with FPGA, which is not my area of
interest.&lt;/p&gt;
&lt;h2&gt;Tip #61&lt;/h2&gt;
&lt;p&gt;Here it could also be mentioned that Altera offers a free version of ModelSim,
called ModelSim-Altera Starter Edition. Compared to Xilinx ISIM and Vivado
Simulator, the ModelSim-ASE is stripped-down version of a full ModelSim.
Therefore there is a possibility to easily migrate from free to paid version
if the need for additional features (such as code coverage) arises.&lt;/p&gt;
&lt;h2&gt;Tip #62&lt;/h2&gt;
&lt;p&gt;The figure with the basic testbench components it is a good starting point
even for the testbenches which do not use any verification methodology, such
as UVM. Several points of what I consider a good testbench (especially for
non-UVM, handcrafted testbenches):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There is a main procedure which performs the setup, runs the driver and
monitor and at the end runs the checker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The setup should be done exactly as software would do it, e.g. if there is
an AXI4-Lite port with configuration and status registers AXI4-Lite Master BFM
should load the configurations settings on that port. Additionally it is also
good to try reading back the configuration values and check them against the
values written.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The driver and the monitor should operate completely asynchronously one
from another. When simulating a module which operates on data stream (e.g. a
DSP module with  AXI-Stream slave port for input and AXI-Stream master port
for output) I like to additionally throttle the output port, to observe how
the module behaves when the upstream module is not able to temporarily keep up
with data flow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The checker (as the name suggest) checks the data received on the monitor
with the reference implementation. When there is a mismatch between the
received and expected value, the checker should clearly show the received and
expected value (SystemVerilog assertions are a nice way to do this).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tip #63&lt;/h2&gt;
&lt;p&gt;The example which shows the delta cycle delays is fantastic and it also
demonstrates that Verilog is very powerful, but also very dangerous language.
The example is also based on two different registers being clocked by two
different clock. If not absolutely necessary I would advise agains using
different clock in the same modules, and to use the FPGA vendor provided FIFOs
for synchronization between clock domains.&lt;/p&gt;
&lt;p&gt;At the end of this tip there is a Verilog code which stores the state name
string in a separated variable. This is one possible source of errors if the
names of states are changed or if new states are added. Much better solution
would be to use SystemVerilog &lt;code&gt;enum&lt;/code&gt;s, which add a little bit of type
strictness to this otherwise type non-strict language.&lt;/p&gt;
&lt;h2&gt;Tip #67&lt;/h2&gt;
&lt;p&gt;I would agree with the observation that the IP, TCP and UDP protocols were not
designed to be implemented in hardware. Most problematic is the position of the
checksum word in packet header, which does not help neither transmitting neither
receiving side. However, &lt;a href="UDP protocol"&gt;https://www.ietf.org/rfc/rfc768.txt&lt;/a&gt;
foresees sending the packets without the checksum calculation, all bits in the
checksum field must be 0. In some cases this may offer an improvement in link
latency (if there is some other method to check the data correctness).&lt;/p&gt;
&lt;h2&gt;Tip #70&lt;/h2&gt;
&lt;p&gt;This tip describes various FPGA interconnect buses. Due to the Xilinx shift
from PowerPC to ARM and with introduction of Vivado, the bus of choice for an
FPGA designer should be one of 3 version of AXI buses, either AXI4, AXI4-Lite
for configuration registers and AXI4-Stream for streaming data.&lt;/p&gt;
&lt;p&gt;Missing on this list is Avalon bus, which is widely used with Altera QSys. There
are two versions (memory-mapped and streaming) and provide a very convenient way
to interface registers to CPU. Only needed signals need to be specified, while
others are automatically added by QSys during the "compilation".&lt;/p&gt;
&lt;h2&gt;Tip #76&lt;/h2&gt;
&lt;p&gt;With the new FPGA family, UltraScale, Xilinx provides a new PCIe DMA
controller (https://www.youtube.com/watch?v=TzzzM97L4HI). This saves a lot of
work to FPGA designers or significantly reduces the price of IPs. By providing
various AXI interfaces the PCIe DMA controller enables easy integration with
Vivado Block Diagrams. The interfaces on PCIe DMA controller are also similar
to the one on embeeded ARM in Zynq FPGAs. Two different form-factors of same
product can be easily develop by using either PCIe DMA or Zynq ARM core. A
tabletop instrument can use a Zynq to run Linux and provide an interface to
the world by touch-screen display or TCP/UDP server. On the other hand, a
mezzanine card based solution (e.g. MicroTCA) can use PCIe DMA to provide a
link to the main CPU in crate.&lt;/p&gt;
&lt;p&gt;Altera also provides similar modules, such as Cyclone V Avalon-MM Interface
(https://www.altera.com/literature/ug/ug_c5_pcie_avmm.pdf).&lt;/p&gt;
&lt;h2&gt;Tip #86&lt;/h2&gt;
&lt;p&gt;When talking about ChipScope the signal attribute &lt;code&gt;keep&lt;/code&gt; should be mentioned,
since it often provides a way to find the post-synthesis nets. The &lt;code&gt;keep&lt;/code&gt;
attribute could also be combined with &lt;code&gt;debug&lt;/code&gt; attribute for easier identification
of signals.&lt;/p&gt;
&lt;p&gt;Verilog example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mark_debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;wire&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;signal_to_be_dbged&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Tip #90&lt;/h2&gt;
&lt;p&gt;UCF constants are completely out of date, and were replaced by an equivalent of
Synopsys Design Contraints in Vivado.&lt;/p&gt;
&lt;h2&gt;Tip #93&lt;/h2&gt;
&lt;p&gt;There is a parameter called &lt;code&gt;cost table&lt;/code&gt; between the options for placer, but the
description would suggest that this may be better called seed, since it provides
a starting point for randomized algorithm (placement).&lt;/p&gt;
&lt;h2&gt;Tip #97&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt; is a more-popular fork of Hudson CI. With a good
support for tcl, Vivado offers a reasonable easy way to automate the compilation
of the entire project directly from the source code in the repository.&lt;/p&gt;
&lt;p&gt;Another tools which could be added to this list is &lt;a href="http://www.ohwr.org/projects/hdl-make"&gt;hdlmake&lt;/a&gt;
which is meant to be an equivalent of Make for FPGA projects. Currently it is
not able to tackle more complex compilation procedures, such as re-compiling
vendor IP cores or handling Vivado Block Diagrams.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="FPGA"></category><category term="Xilinx"></category><category term="Books"></category></entry><entry><title>HDL data type for Python parser implementations</title><link href="www.j-marjanovic.io/hdl-data-type-for-python-parser-implementations.html" rel="alternate"></link><published>2015-11-15T22:00:00+01:00</published><updated>2015-11-15T22:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2015-11-15:www.j-marjanovic.io/hdl-data-type-for-python-parser-implementations.html</id><summary type="html">&lt;p&gt;Recently I had to implement a parser for the PCIe protocol. The data was
captured with Xilinx ChipScope and saved as TSV (tab-separated value) text file.
I wanted to implement a parser in Python, my favorite language for this kind of
tasks. I have stumbled to a problem when I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I had to implement a parser for the PCIe protocol. The data was
captured with Xilinx ChipScope and saved as TSV (tab-separated value) text file.
I wanted to implement a parser in Python, my favorite language for this kind of
tasks. I have stumbled to a problem when I needed an elegant way to represent
the vector of bits of arbitrary length. I have found several libraries but none
of them satisfied my needs, so I put together a small class, which mimics
SystemVerilog vectors.&lt;/p&gt;
&lt;script src="https://gist.github.com/j-marjanovic/348499e6cae3622554a4.js"&gt;&lt;/script&gt;

&lt;p&gt;Let's have a look at other alternatives which were available but did not
completely suit my needs. I wanted a vector slicing syntax which is similar to
the one in SystemVerilog and it allows to catch the typos quickly.&lt;/p&gt;
&lt;h2&gt;bitstring&lt;/h2&gt;
&lt;p&gt;From their site: &lt;a href="https://pypi.python.org/pypi/bitstring/3.1.3"&gt;bitstring&lt;/a&gt; is a
pure Python module designed to help make the creation and analysis of binary
data as simple and natural as possible.&lt;/p&gt;
&lt;p&gt;It quick test finds two things which I would did not like: taking slice wider
than vector length pads the resulting vector with zeros and the slice indexes
are inverted compared to more used [higher_limit:lower_limit] notation in HDLs.
The output of the slicing is a closed interval, which is the behavior I would
expect.&lt;/p&gt;
&lt;h2&gt;BitArray&lt;/h2&gt;
&lt;p&gt;The first thing which comes in mind is that there is not an easy way to create a
bitarray and initialize it from int in a single step (using constructor). The
only way to initialize BitArray is to use binary-formated string. This requires
a call of bin() function and dropping first two characters if your data is
stored as an int. At this point one can already start thinking of implementing
it's own class. The slicing has the same behavior as bitstring, which I did not
like for the application I need.&lt;/p&gt;
&lt;h2&gt;A simple solution on Stack Overflow&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href="http://stackoverflow.com/a/150411/4059686"&gt;similar solution&lt;/a&gt; already
posted on Stack Overflow, however it lacks an equality operator.&lt;/p&gt;
&lt;h2&gt;MyHDL&lt;/h2&gt;
&lt;p&gt;Since MyHDL is a way to write HDL with Python it comes as obvious choice to use
it in a simple Python parser. MyHDL has a &lt;em&gt;intbv&lt;/em&gt; data type which is very
similar to vectors in Verilog and VHDL. However, there are some minor things
which discouraged me from using it in my parser.&lt;/p&gt;
&lt;p&gt;Lets have a look at a modified version of the VerilogBits unit test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;myhdl&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testmyhdlintbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_equality&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0AB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertNotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xCD&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slicing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xA&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;abcd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xABCD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xA&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xD&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slice_up_vect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_invalid_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This results are 3 failing tests: test_invalid_slice, test_slicing, and
test_unpack. test_invalid_slice fails because taking a slice wider than a vector
width produces fills the missing bits with zero. This is similar to
SystemVerilog vector of bits, which is a 2-level data type (it can be only 0 or
1). I prefer more rigorous behavior when slicing vectors, since errors like that
can be quite hard to catch. The VerilogBits throws an exception when an invalid
slice is requested.&lt;/p&gt;
&lt;p&gt;If the zero padding problem with MyHDL is something I could live with, the other
two failing test are much more discouraging for someone who sometimes dreams
(System)Verilog. The &lt;a href="http://docs.myhdl.org/en/stable/manual/hwtypes.html#bit-slicing"&gt;bit slicing in
MyHDL&lt;/a&gt; is half-
open as is expected in Python and not a closed interval as expected from HDLs
(e.g.  to get the LSB one should write [8:0] instead of [7:0]). Again, this is
just a convention and the software world is using the half-open interval for
decades (&lt;a href="https://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF"&gt;E.W.Dijkstra: Why numbering should start at
zero&lt;/a&gt;). But if your
parser in Python is there to find bugs in your SystemVerilog code, it makes much
more sense to use the same notation in both languages.&lt;/p&gt;
&lt;h2&gt;SystemVerilog&lt;/h2&gt;
&lt;p&gt;The SystemVerilog provide all the necessary tools to effectively manipulate bits
(duh), but the Python with the generators, list comprehensions and dictionaries
(well, SystemVerilog does have associative array) is much more elegant language.
The ability to test commands on-the-fly in the interpreter is also much
welcomed.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Python"></category><category term="Verilog"></category><category term="FPGA"></category><category term="HDL"></category></entry><entry><title>Compilation of Linux kernel for Raspberry Pi</title><link href="www.j-marjanovic.io/compilation-of-linux-kernel-for-raspberry-pi.html" rel="alternate"></link><published>2015-03-01T19:00:00+01:00</published><updated>2015-03-01T19:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2015-03-01:www.j-marjanovic.io/compilation-of-linux-kernel-for-raspberry-pi.html</id><summary type="html">&lt;p&gt;Yesterday I got my Raspberry Pi 2, the evolution of the legendary Raspberry Pi. 
The evolution is the right word to describe what has changed compared to 
the previous version. The processor it is now a quad-core, it runs faster,
it has got a newer instruction set (ARMv7) and the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday I got my Raspberry Pi 2, the evolution of the legendary Raspberry Pi. 
The evolution is the right word to describe what has changed compared to 
the previous version. The processor it is now a quad-core, it runs faster,
it has got a newer instruction set (ARMv7) and the board now incorporates 1GB
of RAM and 4 USB connector. The RCA jack is no longer present, the additional
place is being occupied by a larger extension header instead. A welcomed update
of already great hardware, in my opinion (for people complaining that it
can't play 4K video, run desktop version of the Windows, ..., well, consider
buying proper computer, RPi was meant to be cheep enough to tinker with
without fear of breaking something).&lt;/p&gt;
&lt;p&gt;I am the kind of the person which thinks that compiling Linux kernel would be 
great a way to spend the Sunday. Since one of my projects with RPi includes
custom driver for communication with FPGA, I needed Linux headers and &lt;em&gt;kbuild&lt;/em&gt;
system for building kernel modules (those who are not familiar with the procedure,
imagine that you are building a program linked with libraries; in this case a 
program is a kernel module and kernel and its modules represent the libraries).&lt;/p&gt;
&lt;p&gt;On the Ubuntu (and I think on other Debian systems but I am not 100% sure) you
can get kernel headers and source directly from the Debian repository, something
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt-get install linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above command will install the headers the headers for the currently running 
kernel. It copies the header files to /usr/src and creates link in /lib/modules/,
this gives the user tools needed to compile kernel modules.&lt;/p&gt;
&lt;h2&gt;The hard way&lt;/h2&gt;
&lt;p&gt;Before you continue reading I would just like to inform you that the procedure 
described in this section did not yield desired result. Although I managed to 
get a kernel image, the &lt;em&gt;kbuild&lt;/em&gt; system did not work. In Thomas Alva Edison style
 I want to present a method which does not work, but at least we know it does not work. The working (and easier) procedure is described in the next section.&lt;/p&gt;
&lt;p&gt;Initially I wanted to get the headers in the same way as I would on Ubuntu, by
using apt (Advanced Packaging Tool). Searching for available packages did not
show the package needed (the Raspbian was running the 3.18.7-v7+ kernel).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;pi@raspberrypi ~ $ &lt;/span&gt;sudo aptitude search linux-headers
&lt;span class="go"&gt;v   linux-headers                                   -                                                           &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-all                        - All header files for Linux 3.10 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-all-armhf                  - All header files for Linux 3.10 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-common                     - Common header files for Linux 3.10-3                      &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-rpi                        - Header files for Linux 3.10-3-rpi                         &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-all                        - All header files for Linux 3.12 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-all-armhf                  - All header files for Linux 3.12 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-common                     - Common header files for Linux 3.12-1                      &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-rpi                        - Header files for Linux 3.12-1-rpi                         &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-all                  - All header files for Linux 3.18 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-all-armhf            - All header files for Linux 3.18 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-common               - Common header files for Linux 3.18.0-trunk                &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-rpi                  - Header files for Linux 3.18.0-trunk-rpi                   &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-rpi2                 - Header files for Linux 3.18.0-trunk-rpi2                  &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-all                       - All header files for Linux 3.2 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-all-armhf                 - All header files for Linux 3.2 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-common                    - Common header files for Linux 3.2.0-4                     &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-rpi                       - Header files for Linux 3.2.0-4-rpi                        &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-all                     - All header files for Linux 3.6 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-all-armhf               - All header files for Linux 3.6 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-common                  - Common header files for Linux 3.6-trunk                   &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-rpi                     - Header files for Linux 3.6-trunk-rpi                      &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-rpi                               - Header files for Linux rpi configuration (meta-package)   &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-rpi-rpfv                          - This metapackage will pull in the headers for the raspbian&lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-rpi2-rpfv                         - This metapackage will pull in the headers for the raspbian&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I tried my luck with &lt;em&gt;linux-headers-rpi2-rpfv&lt;/em&gt; which installed headers for
kernel 3.18.0. That might sound close enough, but Linux refuses modules which
have not been compiled with exactly the same same kernel. &lt;/p&gt;
&lt;p&gt;So I decided to recompile the kernel on my laptop running Ubuntu. The procedure
of compiling on one type of machine (in this case Intel x86_64 processor) for
another (in this case ARM processor) is called cross-compilation.&lt;/p&gt;
&lt;p&gt;The process of cross-compilation is described here: &lt;a href="http://elinux.org/Raspberry_Pi_Kernel_Compilation"&gt;Raspberry Pi Kernel Compilation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everything went fine, I got the kernel image and /lib/modules directory. The only
thing that the guide does not mention is that &lt;em&gt;make modules_install&lt;/em&gt; creates 
symbolic links to the original directory. I copied the entire kernel directory
to /usr/src and recreated symbolic links, so everything should be fine.&lt;/p&gt;
&lt;p&gt;At this point if everything went OK we would have a working kernel and its 
&lt;em&gt;kbuild&lt;/em&gt; system which gives us the tools to compile the kernel modules out of the
tree (in a separate directory). The RPi boots up, which is a good sign, meaning
that there is nothing wrong with the kernel image. &lt;/p&gt;
&lt;p&gt;However, when I try to compile the kernel module, I get the error saying that 
there is a syntax error in script in kernel module 
(the same problem as described &lt;a href="http://stackoverflow.com/questions/17282461/scripts-recordmcount-syntax-error-when-i-try-to-build-a-linux-kernel-module-o"&gt;here&lt;/a&gt;. The answer by Joe C states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyway, if you cross compile you don't get a /usr/src/linux-header-x.x.x/scripts dir that's usable on your target system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since I previously downloaded another kernel headers from Debian repository,
I tired copying the scripts directory from there:&lt;/p&gt;
&lt;p&gt;pi@raspberrypi /usr/src/linux-headers-3.18.0-trunk-rpi2 $ sudo cp -rv scripts/ ../linux-sources-3.18.8-v7+/&lt;/p&gt;
&lt;p&gt;This fixed the compilation problem just to cause complete disaster when I
tried inserting the module. The following kernel message (&lt;em&gt;dmesg&lt;/em&gt; command)
shows nothing promising:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.164155&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;paging&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fe220b30&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.176292&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pgd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b5dd8000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.183812&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fe220b30&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pgd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.192196&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Internal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Oops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;#1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PREEMPT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SMP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ARM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.202324&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Modules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;linked&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pi64_dev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_bcm2835&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_soc_pcm512x_i2c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_soc_wm8804&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_soc_pcm512x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_soc_tas5713&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regmap_spi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regmap_i2c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_soc_bcm2708_i2s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;regmap_mmio&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_soc_core&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_compress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_pcm_dmaengine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_pcm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_seq_device&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd_timer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r8712u&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;snd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spi_bcm2708&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i2c_bcm2708&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.239611&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;PID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3468&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Comm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;insmod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Tainted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mf"&gt;3.18.8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v7&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;#1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.252306&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b87aa840&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;ti&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760a000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;ti&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760a000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.262985&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;load_module&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0x1a64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mh"&gt;0x1f0c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.272699&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;load_module&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0x1a50&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mh"&gt;0x1f0c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.282373&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;800940d4&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;800940c0&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;psr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90000013&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.282373&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760be88&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f110770&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bf44&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.304401&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f110600&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80536&lt;/span&gt;&lt;span class="n"&gt;d44&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.314883&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b86dc8c4&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fe220b1c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f11060c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bf48&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.326685&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760be70&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b7555280&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;807&lt;/span&gt;&lt;span class="n"&gt;f2a3c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.338495&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Flags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NzcV&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;IRQs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;FIQs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SVC_32&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ISA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ARM&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Segment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.350916&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;c5387d&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="n"&gt;dd806a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;DAC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000015&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.361932&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;insmod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3468&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;limit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xb760a238&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.373206&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xb760be88&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xb760c000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.382808&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;be80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f11060c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00007&lt;/span&gt;&lt;span class="n"&gt;fff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8009168&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ffffffff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bee4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bd949000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.396352&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bea0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f11060c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bedc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;807e4&lt;/span&gt;&lt;span class="n"&gt;d78&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f110648&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760a000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;f110770&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.409938&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bec0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;f4b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;806&lt;/span&gt;&lt;span class="n"&gt;c9bdc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ba7b961c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760a000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b9330000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;808&lt;/span&gt;&lt;span class="n"&gt;ab8fc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;fd3000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.423538&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bee0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.437137&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bf00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;f4b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.450707&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bf20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;fd3000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;f91948&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="n"&gt;f0a4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760a000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bfa4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bf48&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.464292&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bf40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80094664&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8009267&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bd949000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;f4b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bd949f3c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bd949de3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bd94acc4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000850&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.477932&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bf60&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000940&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0000001&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000020&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000017&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000014&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.491605&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bf80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000010&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;eb7861c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7768&lt;/span&gt;&lt;span class="n"&gt;b038&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b760bfa8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.505297&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bfa0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="n"&gt;ee20&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80094588&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;eb7861c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;fd3000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;f4b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;f91948&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;fd3000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.519052&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bfc0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;eb7861c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7768&lt;/span&gt;&lt;span class="n"&gt;b038&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7768&lt;/span&gt;&lt;span class="n"&gt;af80&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;f4b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;f91948&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.532810&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;bfe0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;eb785c4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;f88fb4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;ef3ab4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60000010&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;fd3000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d466662e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d5f7abd0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.546635&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;800940d4&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;80094664&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyS_init_module&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0xe8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mh"&gt;0xfc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.560087&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;80094664&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SyS_init_module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;&amp;lt;8000ee20&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_fast_syscall&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mh"&gt;0x48&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.573935&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e51bc088&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e15c0006&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e2466008&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;a000009&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e5963014&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt; 4246.604593&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;---[ end trace 8e4bd0982f9f1fd0 ]---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It basically says that there was an error trying to access the wrong part of the
memory from the &lt;em&gt;insmod&lt;/em&gt; process.&lt;/p&gt;
&lt;p&gt;At this point I decided to stop experimenting with this approach. I was getting
frustrated with constant fighting with all kind of errors. When I initially started
writing this blog post I wanted to describe the method to cross-compile Linux
kernel image and &lt;em&gt;kbuild&lt;/em&gt; build system. Unfortunately, although it may sound
appealing to speed up the process by cross compiling on x86 machine, the 
complication with various stuff make it more time consuming that compiling directly
on Raspberry Pi. I know myself good enough that I know I wont quit this easy.
I will probably return to this problem on some other occasion and tried again,
be assured that I will write a blog post If I succeed.&lt;/p&gt;
&lt;h2&gt;The easy way&lt;/h2&gt;
&lt;p&gt;At the end I dropped the cross-compilation idea and resorted to compiling kernel
on the RPi itself. This can also serve as a performance test of the new RPi. 
I overclocked it to 1000MHz (using raspi-config I selected the RPi2 setting).&lt;/p&gt;
&lt;p&gt;The compilation of kernel took something less than 2 hours, quite decent result
compared to 17 minutes it takes on my laptop with not-so-new i3 and 6GB of RAM.&lt;/p&gt;
&lt;p&gt;The following figure shows the temperature during the compilation. The temperature
was captured every minute with a Cron job which read from 
&lt;strong&gt;/sys/class/thermal/thermal_zone0/temp&lt;/strong&gt;&lt;/p&gt;
&lt;p style="width:90%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="RPi temperature" src="www.j-marjanovic.io/images/pi_temp_during_compile.png"&gt;&lt;/p&gt;
&lt;p&gt;Finally, using freshly compiled kernel on RPi, I managed to get compile my 
module and to load it in kernel (debug message from kernel):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;[   38.324756] ============================================&lt;/span&gt;
&lt;span class="go"&gt;[   38.324786]        Pi64 driver by Jan Marjanovic        &lt;/span&gt;
&lt;span class="go"&gt;[   38.324796] &lt;/span&gt;
&lt;span class="go"&gt;[   38.324808]   built: Mar  1 2015 11:38:10&lt;/span&gt;
&lt;span class="go"&gt;[   38.324818] ============================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Linux"></category><category term="Raspberry Pi"></category></entry><entry><title>Lattice iCEcube2 on Ubuntu 14.04</title><link href="www.j-marjanovic.io/lattice-icecube2-on-ubuntu-1404.html" rel="alternate"></link><published>2015-03-01T19:00:00+01:00</published><updated>2015-03-01T19:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2015-03-01:www.j-marjanovic.io/lattice-icecube2-on-ubuntu-1404.html</id><summary type="html">&lt;p&gt;/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/synplify_pro: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/synplify_pro: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/c_hdl: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/c_hdl: 200 â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/synplify_pro: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/synplify_pro: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/c_hdl: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/c_hdl: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/syn_nfilter: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/syn_nfilter: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/m_generic: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/m_generic: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/m_generic: 186: [: unexpected operator&lt;/p&gt;
&lt;p&gt;sed -i 's/\/bin\/sh/\/bin\/bash/g' *&lt;/p&gt;
&lt;p&gt;jan@jan-ThinkPad-T510 ~/opt/lscc/iCEcube2.2014.12/synpbase/bin
 % for file in $(ls); do sed -i 's/\/bin\/sh/\/bin\/bash/g' $file; done    19:33:27 on 2015-03-07 
sed: couldn't edit config: not a regular file
jan@jan-ThinkPad-T510 ~/opt/lscc/iCEcube2.2014.12/synpbase/bin
 % &lt;/p&gt;
&lt;p&gt;for file in $(ls -la | grep -E '^[^d]' | awk -F "/" '{print $NF}' ); do echo $file; done &lt;/p&gt;
&lt;p&gt;for file in $(ls -la | tail -n +2 | grep -E '^[^d]' | awk '{print $NF}' ); do sed -i 's/\/bin\/sh/\/bin\/bash/g' $file; done &lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Lattice"></category><category term="iCE40"></category><category term="Linux"></category><category term="Ubuntu"></category></entry><entry><title>Lattice iCE40 configuration using Raspberry Pi</title><link href="www.j-marjanovic.io/lattice-ice40-configuration-using-raspberry-pi.html" rel="alternate"></link><published>2015-01-18T22:00:00+01:00</published><updated>2015-01-18T22:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2015-01-18:www.j-marjanovic.io/lattice-ice40-configuration-using-raspberry-pi.html</id><summary type="html">&lt;p&gt;As I mentioned in previous post, I started playing around with Lattice iCE40 FPGA. 
In the last post I did a quick overview of the 
iCE40 tools. The iCEcube2 cannot compete with Xilinx ISE and Altera Quartus II, 
not to mention the Vivado, but since this is a low-cost FPGA â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned in previous post, I started playing around with Lattice iCE40 FPGA. 
In the last post I did a quick overview of the 
iCE40 tools. The iCEcube2 cannot compete with Xilinx ISE and Altera Quartus II, 
not to mention the Vivado, but since this is a low-cost FPGA the current tool 
offers all you need to do this kind of simple projects (I would definitely recommend
the beginners to stay away from Lattice as it is not as user friendly as vendor X
or vendor A, you need to have some experience to master the work flow). &lt;/p&gt;
&lt;p&gt;Last time I found out that iCEcube2 Programmer runs only on Windows, on GNU/Linux 
you need to find other solutions. How the Programmer works is another interesting
thing. One would expect that is uses JTAG port on FPGA to configure it, but that is
not the case. The Programmer communicates with Atmel microcontroller which programs
Serial NOR Flash memory. Then it reset the FPGA which boots in SPI Master mode, and 
it reads configuration from Flash. &lt;/p&gt;
&lt;p&gt;A quick look at &lt;a href="http://www.latticesemi.com/~/media/Documents/ApplicationNotes/IK/iCE40ProgrammingandConfiguration.pdf?document_id=46502"&gt;TN1248: iCE40 Programming and Configuration&lt;/a&gt; 
shows that it can be programmed also by writing from 
another device (e.g. microprocessor to the SPI port). This is called SPI Slave 
programming mode and it is enabled by holding the line CS_n low at the reset of
the FPGA. &lt;/p&gt;
&lt;p style="width:600px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="iCE40 development board and Raspberry Pi" src="www.j-marjanovic.io/images/ice40_rpi_conf.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So I tried programming it using Raspberry Pi. I connected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grounds together&lt;/li&gt;
&lt;li&gt;SI on iCE40 to MOSI on RPi&lt;/li&gt;
&lt;li&gt;SO on iCE40 to MISO on RPi (this one is actually not needed)&lt;/li&gt;
&lt;li&gt;SCK on iCE40 to CLK on RPi&lt;/li&gt;
&lt;li&gt;pin GPIO25 on RPi to SS on iCE40 (this one is needed to enter the slave mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote the following script and used one of the .bin files from one of the project
in iCEcube2. &lt;/p&gt;
&lt;script src="https://gist.github.com/j-marjanovic/cb271e861d279a31775d.js"&gt;&lt;/script&gt;

&lt;p&gt;This is the output (well, the real output it is the configured board which blinks the LEDs while
the DONE led is lit):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;pi@raspberrypi ~/Jan/ice40/test1 $ &lt;/span&gt;sudo bash conf_FPGA.sh proto1_top_bitmap.bin
&lt;span class="go"&gt;GPIO 25 not exported, trying to export...&lt;/span&gt;

&lt;span class="go"&gt;spidev does not exist&lt;/span&gt;
&lt;span class="go"&gt;SPI driver not loaded, try to load it...&lt;/span&gt;
&lt;span class="go"&gt;OK: SPI driver loaded&lt;/span&gt;

&lt;span class="go"&gt;Changing direction to out&lt;/span&gt;
&lt;span class="go"&gt;out&lt;/span&gt;
&lt;span class="go"&gt;Setting output to low&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;

&lt;span class="go"&gt;Please power cycle the iCE40 FPGA board&lt;/span&gt;
&lt;span class="go"&gt;Press any key...&lt;/span&gt;

&lt;span class="go"&gt;Continuing with configuration procedure&lt;/span&gt;
&lt;span class="go"&gt;63+1 records in&lt;/span&gt;
&lt;span class="go"&gt;63+1 records out&lt;/span&gt;
&lt;span class="go"&gt;32300 bytes (32 kB) copied, 0.606931 s, 53.2 kB/s&lt;/span&gt;
&lt;span class="go"&gt;Setting output to high&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I find this type of configuration very useful when the FPGA is not the main
chip in the system (when there is as in the previous example an RPi). The 
configuration file can be stored on Raspberry Pi SD card and at each start-up
the FPGA gets programmed. The image update can be done very easily and there 
is no way a user can brick the FPGA (which can easily happen if the FPGA writes
the configuration image and boots from its Flash, in this case two images 
(factory and user) are recommended).&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Lattice"></category><category term="iCE40"></category><category term="FPGA"></category><category term="Raspberry Pi"></category><category term="bash"></category></entry><entry><title>My first encounter with Lattice Semiconductor</title><link href="www.j-marjanovic.io/my-first-encounter-with-lattice-semiconductor.html" rel="alternate"></link><published>2014-12-24T20:00:00+01:00</published><updated>2014-12-24T20:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2014-12-24:www.j-marjanovic.io/my-first-encounter-with-lattice-semiconductor.html</id><summary type="html">&lt;p&gt;The FPGA market is one of those classical markets where there are two players 
who have nearly 100% market share, e.g. PC processors (Intel and AMD), graphic
cards (NVIDIA and ATI), ... The two mayor players on the FPGA market are Xilinx
and Altera. Both of this two companies follows â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The FPGA market is one of those classical markets where there are two players 
who have nearly 100% market share, e.g. PC processors (Intel and AMD), graphic
cards (NVIDIA and ATI), ... The two mayor players on the FPGA market are Xilinx
and Altera. Both of this two companies follows their rival very closely.
When one company announces the next big thing, support for new technology or
improvement to their current products, the other will shortly follow with
similar announcement.&lt;/p&gt;
&lt;p&gt;This tempo of development has brought the two main programs of these two rivals
at very high level. There is a tool (Altera Qsys and Xilinx Vivado) which lets 
you build a system from standardized building blocks with standardized 
interfaces (Altera Avalon and ARM AXI). They both offer a large palette of IP
ready to be used with their program. The debugging of the designs is simplified
with good integration with simulators (Altera by default uses Mentor Graphic 
ModelSim, Xilinx has its own XSim, but it can also use ModelSim) and integrated 
logic analysers (Altera SignalTap and Xilinx ILA) are a great help when 
simulation works but real world FPGA does not.&lt;/p&gt;
&lt;p&gt;I have an idea for my next hobby project which needs an FPGA (actually, CPLD will
do just fine) for translating one communication protocol to another. The board
will be an expansion board for Raspberry Pi, so the cost should be really low 
(I have in mind something bellow 5$). Altera and Xilinx do not offer anything in
this price range, so I recalled Lattice ads. The iCE40 series are small FPGAs
with few K logic cells and low prices. Another advantage for my project is 
possibility to configure it by SPI, something that most CPLDs does not support.&lt;/p&gt;
&lt;p&gt;So I ordered &lt;a href="http://www.latticesemi.com/iceblink40-hx1k"&gt;iCEblink40HX1K Evaluation Kit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First I tried installing the iCEcube2 software on Centos 7 which is my usual
working environment. The installation went smoothly. The problem started to occur 
when the licence manager was unable to find network adapter MAC address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;License&lt;/span&gt; &lt;span class="s s-Atom"&gt;checkout&lt;/span&gt; &lt;span class="s s-Atom"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;


&lt;span class="nv"&gt;Invalid&lt;/span&gt; &lt;span class="s s-Atom"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="s s-Atom"&gt;hostid&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="s s-Atom"&gt;this&lt;/span&gt; &lt;span class="s s-Atom"&gt;system&lt;/span&gt; &lt;span class="s s-Atom"&gt;does&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;match&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;hostid&lt;/span&gt;
 &lt;span class="s s-Atom"&gt;specified&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;license&lt;/span&gt; &lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;Feature&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;       &lt;span class="nv"&gt;LSC_ICECUBE2_A&lt;/span&gt;
&lt;span class="nv"&gt;Hostid&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;        &lt;span class="s s-Atom"&gt;xxxxxxxxxxxx&lt;/span&gt;
&lt;span class="nv"&gt;License&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;lscc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;license&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nv"&gt;FLEXnet&lt;/span&gt; &lt;span class="nv"&gt;Licensing&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;57.&lt;/span&gt;  &lt;span class="nv"&gt;System&lt;/span&gt; &lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(null)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;For&lt;/span&gt; &lt;span class="s s-Atom"&gt;further&lt;/span&gt; &lt;span class="s s-Atom"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;refer&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;FLEXnet&lt;/span&gt; &lt;span class="nv"&gt;Licensing&lt;/span&gt; &lt;span class="nv"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt; &lt;span class="nv"&gt;Guide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s s-Atom"&gt;available&lt;/span&gt; &lt;span class="s s-Atom"&gt;at&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;www.macrovision.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is that the FLEXnet software searches for the MAC address of the eth*
interface, while Centos uses completely different naming. Being familiar with the
problem, I used a trick to create a new interface named eth0 (you should replace
the x's with desired MAC address):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;modprobe dummy
ip link set name eth0 dev dummy0
ifconfig eth0 hw ether xx:xx:xx:xx:xx:xx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After setting everything up, a view on the iCEcube2 showed before me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="iCEcube2" src="www.j-marjanovic.io/images/icestudio.png"&gt;&lt;/p&gt;
&lt;p&gt;It is a little Spartan but it has all basic functions the FPGA developer needs. The
text editor lacks code coloring, auto-complete but there is a chance to use a 3rd
party text editor. The text in the output window is light violet on white background
and it should be changed to something more visible.&lt;/p&gt;
&lt;p&gt;The iCE family of FPGAs lacks JTAG port. Instead, user programs SPI Flash memory
through an USB to SPI converter and then the FPGA boots from SPI memory. That means
that debugging is done or by using 4 LEDs on the side or with oscilloscope, not a 
very user friendly approach.&lt;/p&gt;
&lt;p&gt;Under Linux, there is additional problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Note&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Integrated&lt;/span&gt; &lt;span class="n"&gt;Aldec&lt;/span&gt; &lt;span class="n"&gt;Active&lt;/span&gt; &lt;span class="n"&gt;HDL&lt;/span&gt; &lt;span class="n"&gt;simulation&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;iCEcube2&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt; 
&lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Well this is it for now, i need to switch to Windows. Merry Christmas to everybody!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;All trademarks and registered trademarks are the property of their respective owners.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Lattice"></category><category term="iCE40"></category><category term="FPGA"></category></entry><entry><title>Theremin First Demo</title><link href="www.j-marjanovic.io/theremin-first-demo.html" rel="alternate"></link><published>2014-11-18T23:00:00+01:00</published><updated>2014-11-18T23:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2014-11-18:www.j-marjanovic.io/theremin-first-demo.html</id><content type="html">&lt;p&gt;During the weekend I was able to take some time to do first test of the theremin.
Here are two recordings of my friend Luka playing.&lt;/p&gt;
&lt;iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/177559922&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/177561150&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;p&gt;There are some more articles explaining how digital theremin works coming,
 remember to check out my blog.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Theremin"></category></entry><entry><title>I just got a Nintendo 64</title><link href="www.j-marjanovic.io/i-just-got-a-nintendo-64.html" rel="alternate"></link><published>2014-11-16T18:00:00+01:00</published><updated>2014-11-16T18:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2014-11-16:www.j-marjanovic.io/i-just-got-a-nintendo-64.html</id><content type="html">&lt;p&gt;I just got a Nintendo 64, my friend Rok was kind enough to lend it.&lt;/p&gt;
&lt;p style="width:700px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Nintendo 64" src="www.j-marjanovic.io/images/N64.png"&gt;&lt;/p&gt;
&lt;p&gt;I have an interesting project in mind, I will keep you updated.
Rok will for sure be the first one to get the alpha version.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Nintendo 64"></category></entry><entry><title>Theremin Antenna Measurements</title><link href="www.j-marjanovic.io/theremin-antenna-measurements.html" rel="alternate"></link><published>2014-11-09T09:00:00+01:00</published><updated>2014-11-09T09:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2014-11-09:www.j-marjanovic.io/theremin-antenna-measurements.html</id><summary type="html">&lt;p&gt;Last week I briefly explained how theremin works. I also presented my idea to develop a 
digital version, using FPGA as a detector of distance between hand and antenna.&lt;/p&gt;
&lt;p&gt;You have probably already heard a joke about theory and practice. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Theory is when you know everything but nothing works. Practice â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Last week I briefly explained how theremin works. I also presented my idea to develop a 
digital version, using FPGA as a detector of distance between hand and antenna.&lt;/p&gt;
&lt;p&gt;You have probably already heard a joke about theory and practice. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Theory is when you know everything but nothing works. Practice is when everything works
 but no one knows why. Here we combine the two, nothing works and no one knows why.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jokes aside, today we will try to measure the time constant of the antenna. In this 
implementation of theremin the measured time constant will be a control for tone pitch. 
Having a good measurement of time constant is therefore very important. A good instrument 
will produce stable tone when hand is hold still. Also, the quality of measurement of 
time constant determines a difference between two consecutive tones and fine control 
of the pitch is also desired.&lt;/p&gt;
&lt;p&gt;Here you can see this highly advanced test - a ruler strapped to the antenna.
This will allow us to measure the relationship between time constant and distance of
the hand. &lt;/p&gt;
&lt;p style="width:441px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Test setup" src="www.j-marjanovic.io/images/theremin_antena_meas.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Since the ruler is made out of plastic (we should say dielectric, when studying electric
fields) it won't affect the antenna field.&lt;/p&gt;
&lt;p&gt;The FPGA is producing a square wave signal at 10kHz, which is then sent to antenna through
a 2.2 MOhm resistor. The resistor is on the other side connected to antenna, thus creating an
RC circuit. The voltage on antenna is feed back to FPGA through a Schmitt Trigger to improve
the measured value. The module in FPGA measures how much time did it take for voltage on
antenna to reach certain value (determined by Schmitt Trigger). This time is directly 
correlated to time constant and therefore to capacitance of the antenna.&lt;/p&gt;
&lt;p&gt;Here we see what the FPGA measured when I placed hand on different distance from antenna.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Time constant without filtering" src="www.j-marjanovic.io/images/theremin_antenna_direct.png"&gt;&lt;/p&gt;
&lt;p&gt;The blue dots denote mean value, the green lines denote one standard deviation and the
black lines denote minimum and maximum value.&lt;/p&gt;
&lt;p&gt;Right now, the measurements do not look very promising, we can see some increase of time
constant as hand approaches antenna, but the noise is extremely high.&lt;/p&gt;
&lt;p&gt;If we have a look at the frequency spectrum of the measurement, we see the reason for the
noise.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Time constant spectral analysis" src="www.j-marjanovic.io/images/theremin_antenna_direct_fft.png"&gt;&lt;/p&gt;
&lt;p&gt;The antenna is 45 cm long copper rod and acts not only as a capacitor for theremin but also
as radio antenna. All the frequency components above Nyquist frequency (which is 5000 kHz
in our case) are being aliased to lower frequencies in our frequency range. A 50Hz signal
from mains is also being picked up.&lt;/p&gt;
&lt;p&gt;We need a filter! A filter will reject all the undesired frequencies and that will greatly
improve.&lt;/p&gt;
&lt;p&gt;I will write another article on filtering in FPGA, meanwhile let's enjoy much improved 
results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Time constant with filtering" src="www.j-marjanovic.io/images/theremin_antenna_filtered.png"&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Theremin"></category></entry><entry><title>Theremin Basics</title><link href="www.j-marjanovic.io/theremin-basics.html" rel="alternate"></link><published>2014-11-06T22:00:00+01:00</published><updated>2014-11-06T22:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2014-11-06:www.j-marjanovic.io/theremin-basics.html</id><summary type="html">&lt;p&gt;Theremin, a first electronic instrument. Leon Theremin invented it in 1928. 
Try to imagine people seeing somebody waving hand in the middle or the air
and producing an extraterrestrial sounds. Theremin, should be considered a 
true pioneer of electronic music.&lt;/p&gt;
&lt;p&gt;The operational principle is quite simple, however an good implementation â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Theremin, a first electronic instrument. Leon Theremin invented it in 1928. 
Try to imagine people seeing somebody waving hand in the middle or the air
and producing an extraterrestrial sounds. Theremin, should be considered a 
true pioneer of electronic music.&lt;/p&gt;
&lt;p&gt;The operational principle is quite simple, however an good implementation is
not so trivial. I recall playing on it in Deutsches Museum in Munich and that
particular model had a sphere as an antenna. The tone frequency is dependant
on antenna capacitance. To achive maximum control, the relationship between
capacitance and distance between hand and antenna should be linear. However,
the model in Munich had reciprocal relationship and that made hitting right 
notes quite hard.&lt;/p&gt;
&lt;p&gt;I am going to make a new version of theremin, a reinterpretation for 21st
century. I will still use antenna to control the pitch, but the "back-end"
will be completely different. &lt;/p&gt;
&lt;p&gt;The antenna acts as one plate of the capacitor and the hand is the other.
I did a quick simulation in Python to be able to show some numbers. This is
meant to be a demonstration of operating principle, so it lacks few
not-so-minor details. The calculations were done in 2D, where antenna in 
real world exist in 3 dimensions. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Theremin simulation" src="www.j-marjanovic.io/images/theremin_antenna.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/drafts/theremin-simulation.html"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we know that antenna acts as a capacitor, so next challenge is to
produce a tone with the pitch related to capacitance. The original Theremin
uses antenna as a capacitor of the LC resonator. Here is the first big
difference between my implementation and original one, I will be measuring
time constant of the RC circuit with an FPGA. &lt;/p&gt;
&lt;p&gt;The FPGA will generate a square wave and feed it to antenna through a
resistance. This will create a current which will charge capacitor (antenna).
The other circuit (module) in FPGA will measure time needed for voltage on 
capacitor to reach certain level. A bigger capacitance (smaller distance 
between hand and antenna)  will result in longer time and a smaller
capacitance (longer distance between hand and antenna) will result in shorter
time. This difference will generate a different pitch.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Theremin settling time" src="www.j-marjanovic.io/images/theremin_settling_time.png"&gt;&lt;/p&gt;
&lt;p&gt;This is all for this part, stay tuned for more.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Projects"></category><category term="Theremin"></category></entry></feed>