<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>j-marjanovic.io</title><link>www.j-marjanovic.io/</link><description></description><lastBuildDate>Fri, 03 Feb 2017 18:00:00 +0100</lastBuildDate><item><title>FOSDEM 2017</title><link>www.j-marjanovic.io/fosdem-2017.html</link><description>&lt;p&gt;I am writing this post from Brussels where I am attending &lt;a href="https://fosdem.org/2017/"&gt;FOSDEM 2017&lt;/a&gt;
conference.&lt;/p&gt;
&lt;p&gt;There are a lot of interesting talks, and sometimes it is quite hard to decide
on which one to go. Luckily there the talks are recorded and one can later
check also the missed ones.&lt;/p&gt;
&lt;p&gt;Here is my list of the talks I plan to attend:&lt;/p&gt;
&lt;h2&gt;Saturday&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/keynotes_welcome/"&gt;Welcome to FOSDEM 2017&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Janson&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/open_power/"&gt;Let's talk about hardware: The POWER of open&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;H.2215 (Ferrer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/lorawan/"&gt;LoRaWAN for exploring the Internet of Things&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;K.1.105 (La Fontaine)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00&lt;/td&gt;
&lt;td&gt;lunch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/kernel_spi_subsystem/"&gt;Groking the Linux SPI Subsystem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UD2.120 (Chavanne)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:00 (alternative)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/sdr_fpga/"&gt;FPGAs in SDR -- Why, when, and how to use them (with RFNoC)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;AW1.120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/hello_world/"&gt;Everything You Always Wanted to Know About "Hello, World"*&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Janson&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/iot_micropython/"&gt;Scientific MicroPython for Microcontrollers and IoT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;AW1.126&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/libreboot/"&gt;Libreboot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;K.1.105 (La Fontaine)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18:05&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/copyleft_defense/"&gt;Understanding The Complexity of Copyleft Defense&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Janson&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Sunday&lt;/h2&gt;
&lt;p&gt;On Sunday I plan to spend most of the time in &lt;a href="https://fosdem.org/2017/schedule/track/electronic_design_automation_eda/"&gt;Electronic Design Automation (EDA) devroom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a selfie of me with the famous &lt;a href="https://en.wikipedia.org/wiki/Manneken_Pis"&gt;Manneken Pis status&lt;/a&gt;:&lt;/p&gt;
&lt;p style="width:50%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Selfie with Manneken Pis" src="www.j-marjanovic.io/images/fosdem_2017/IMG_4898.JPG" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Fri, 03 Feb 2017 18:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2017-02-03:www.j-marjanovic.io/fosdem-2017.html</guid><category>Conference</category></item><item><title>Books read: E. Stavinov: 100 Power Tips for FPGA Designers</title><link>www.j-marjanovic.io/books-read-e-stavinov-100-power-tips-for-fpga-designers.html</link><description>&lt;p&gt;I recently found a great book explaining in details FPGA workflow for Xilinx
tools, titled 100 Power Tips for FPGA Designers. &lt;a href="http://www.outputlogic.com"&gt;Evgeni
Stavinov&lt;/a&gt; is an experienced FPGA designer who
previously worked for Xilinx. It is not evident from the title, but this book
focuses almost entirely on the Xilinx, while Altera, Lattice and Microsemi are
mentioned just briefly in an FPGA vendor list and every once in a while. Due
to a fast-paced development of the FPGAs and corresponding tools, it is clear
that a book from 2011 would be slightly outdated in 2016. Most notable change
in the previous years was a new software suite from Xilinx, called Vivado and
the slow introduction of C-to-FPGA tools, such as Vivado HLS.&lt;/p&gt;
&lt;p style="width:70%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Evgeni Stavinov: 100 Power Tips for FPGA Designers" src="www.j-marjanovic.io/images/100_power_tips_fpga_designers.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Nonetheless, this book is ideal for somebody who already has some (formal)
education about the FPGA but lacks the real world experience. The author
manages to touch every aspect of the FPGA design, from device selection,
simulation, coding, debugging, communication protocols, FPGA board bring-up
and all small details one should know about FPGAs.&lt;/p&gt;
&lt;p&gt;The book (as the title suggest is organized into 100 tips). Here are my
notes and comments to some tips this book provides.&lt;/p&gt;
&lt;h3&gt;Tip 9&lt;/h3&gt;
&lt;p&gt;The FPGA field has seen some new tools emerge in the past few years, while
some other tools ceased to exist or were integrated in other software suites.
Under &lt;strong&gt;Lint tools&lt;/strong&gt; should definitely be added &lt;em&gt;Sigasi Editor&lt;/em&gt;, an Eclipse
based editor for VHDL and Verilog. &lt;strong&gt;Verilator&lt;/strong&gt; is a cycle based simulator,
since it can be used as a linter (&lt;code&gt;--lint-only&lt;/code&gt;) it should be also added on
this list.&lt;/p&gt;
&lt;p&gt;Another interesting tool worth mentioning is &lt;strong&gt;Doxygen&lt;/strong&gt; which can create the
documentation from the comments in the code and other Markdown documents. The
original program does not support Verilog, but there is a fork &lt;strong&gt;Doxverilog&lt;/strong&gt;
which also adds a support for Verilog.&lt;/p&gt;
&lt;h3&gt;Tip 15&lt;/h3&gt;
&lt;p&gt;This tip states that &lt;code&gt;initial&lt;/code&gt; block are ignored by FPGA synthesis tools. This
probably a feature which was added after the release of the book, but both XST
in ISE 14.7
(http://www.xilinx.com/support/documentation/sw_manuals/xilinx14_7/xst.pdf)
and Vivado Synthesis
(http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_2/ug901-vivado-synthesis.pdf)
now support initialization of the register from &lt;code&gt;initial&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;Vivado Synthesis Guidelines go even further and suggest using &lt;code&gt;inital&lt;/code&gt; instead
of reset:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Avoid operational set/reset logic whenever possible. There may be other,
less expensive, ways to achieve the desired effect, such as taking
advantage of the circuit global reset by defining an initial content.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Tip #18&lt;/h2&gt;
&lt;p&gt;A small typo on page 81, in SystemVerilog &lt;code&gt;logic&lt;/code&gt; is a 4-state type which
should replace &lt;code&gt;reg&lt;/code&gt;, especcialy in cases in which &lt;code&gt;reg&lt;/code&gt; keyword may cause a
confusion (e.g. &lt;code&gt;always_comb&lt;/code&gt; block).&lt;/p&gt;
&lt;h2&gt;Tip #19&lt;/h2&gt;
&lt;p&gt;While mentioning code editors for Verilog and VHDL it should be worth
mentioning that the one integrated in Xilinx and Altera tools are complete
garbage. Vivado did not even had a auto-complete until 2016!&lt;/p&gt;
&lt;p&gt;The list of code editors could also be extended with &lt;strong&gt;Sublime Text&lt;/strong&gt; and
&lt;strong&gt;Atom Editor&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Tip #22&lt;/h2&gt;
&lt;p&gt;This tip discusses meta-stability and data-coherency on clock-domain crossing
logic. It would probably be a good idea to also mention how to proceed when a
state machine transitions are controlled with asynchronous signals. This is
similar problem to data coherency, all input signals should be re-sampled to
the state machine clock domain before they are connected to state-transition
logic. Otherwise it is possible for state machine to enter illegal states due
to different delays from IO pins to registers.&lt;/p&gt;
&lt;h2&gt;Tip #26&lt;/h2&gt;
&lt;p&gt;A small typo on page 124, the last line of code example for shift registers
should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;initial&lt;/span&gt; &lt;span class="n"&gt;shift4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// result is 8&amp;#39;hE0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that result after shift operation should be 8'hE0 (-32) instead of 8'h0E.&lt;/p&gt;
&lt;h2&gt;Tip #27&lt;/h2&gt;
&lt;p&gt;I was always wondering if a state machine which has a transition from
&lt;code&gt;default&lt;/code&gt; case defined is equivalent to state machine generated with
&lt;code&gt;-safe_implementation&lt;/code&gt; switch.&lt;/p&gt;
&lt;h2&gt;Tip #29&lt;/h2&gt;
&lt;p&gt;I enjoyed the discussion about various reset mechanism. When I stared
developing with FPGAs I always started writing process blocks the same way
(&lt;code&gt;if !reset_n init_regs_to_something else my_logic_here&lt;/code&gt;) not realizing that
often a reset is not needed. This is especially true in data-processing
pipelines.&lt;/p&gt;
&lt;h2&gt;Tip #34&lt;/h2&gt;
&lt;p&gt;When initializing Block RAM I would suggest using &lt;code&gt;readmemb&lt;/code&gt; and &lt;code&gt;readmemh&lt;/code&gt;
system calls instead of proposed Xilinx custom format, since &lt;code&gt;readmemb&lt;/code&gt; and 
&lt;code&gt;readmemh&lt;/code&gt; work also for simulation.&lt;/p&gt;
&lt;h2&gt;Tips #45-#55&lt;/h2&gt;
&lt;p&gt;These tips discuss ASIC prototyping with FPGA, which is not my area of
interest.&lt;/p&gt;
&lt;h2&gt;Tip #61&lt;/h2&gt;
&lt;p&gt;Here it could also be mentioned that Altera offers a free version of ModelSim,
called ModelSim-Altera Starter Edition. Compared to Xilinx ISIM and Vivado
Simulator, the ModelSim-ASE is stripped-down version of a full ModelSim.
Therefore there is a possibility to easily migrate from free to paid version
if the need for additional features (such as code coverage) arises.&lt;/p&gt;
&lt;h2&gt;Tip #62&lt;/h2&gt;
&lt;p&gt;The figure with the basic testbench components it is a good starting point
even for the testbenches which do not use any verification methodology, such
as UVM. Several points of what I consider a good testbench (especially for
non-UVM, handcrafted testbenches):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There is a main procedure which performs the setup, runs the driver and
monitor and at the end runs the checker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The setup should be done exactly as software would do it, e.g. if there is
an AXI4-Lite port with configuration and status registers AXI4-Lite Master BFM
should load the configurations settings on that port. Additionally it is also
good to try reading back the configuration values and check them against the
values written.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The driver and the monitor should operate completely asynchronously one
from another. When simulating a module which operates on data stream (e.g. a
DSP module with  AXI-Stream slave port for input and AXI-Stream master port
for output) I like to additionally throttle the output port, to observe how
the module behaves when the upstream module is not able to temporarily keep up
with data flow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The checker (as the name suggest) checks the data received on the monitor
with the reference implementation. When there is a mismatch between the
received and expected value, the checker should clearly show the received and
expected value (SystemVerilog assertions are a nice way to do this).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tip #63&lt;/h2&gt;
&lt;p&gt;The example which shows the delta cycle delays is fantastic and it also
demonstrates that Verilog is very powerful, but also very dangerous language.
The example is also based on two different registers being clocked by two
different clock. If not absolutely necessary I would advise agains using
different clock in the same modules, and to use the FPGA vendor provided FIFOs
for synchronization between clock domains.&lt;/p&gt;
&lt;p&gt;At the end of this tip there is a Verilog code which stores the state name
string in a separated variable. This is one possible source of errors if the
names of states are changed or if new states are added. Much better solution
would be to use SystemVerilog &lt;code&gt;enum&lt;/code&gt;s, which add a little bit of type
strictness to this otherwise type non-strict language.&lt;/p&gt;
&lt;h2&gt;Tip #67&lt;/h2&gt;
&lt;p&gt;I would agree with the observation that the IP, TCP and UDP protocols were not
designed to be implemented in hardware. Most problematic is the position of the
checksum word in packet header, which does not help neither transmitting neither
receiving side. However, &lt;a href="UDP protocol"&gt;https://www.ietf.org/rfc/rfc768.txt&lt;/a&gt;
foresees sending the packets without the checksum calculation, all bits in the
checksum field must be 0. In some cases this may offer an improvement in link
latency (if there is some other method to check the data correctness).&lt;/p&gt;
&lt;h2&gt;Tip #70&lt;/h2&gt;
&lt;p&gt;This tip describes various FPGA interconnect buses. Due to the Xilinx shift
from PowerPC to ARM and with introduction of Vivado, the bus of choice for an
FPGA designer should be one of 3 version of AXI buses, either AXI4, AXI4-Lite
for configuration registers and AXI4-Stream for streaming data.&lt;/p&gt;
&lt;p&gt;Missing on this list is Avalon bus, which is widely used with Altera QSys. There
are two versions (memory-mapped and streaming) and provide a very convenient way
to interface registers to CPU. Only needed signals need to be specified, while
others are automatically added by QSys during the "compilation".&lt;/p&gt;
&lt;h2&gt;Tip #76&lt;/h2&gt;
&lt;p&gt;With the new FPGA family, UltraScale, Xilinx provides a new PCIe DMA
controller (https://www.youtube.com/watch?v=TzzzM97L4HI). This saves a lot of
work to FPGA designers or significantly reduces the price of IPs. By providing
various AXI interfaces the PCIe DMA controller enables easy integration with
Vivado Block Diagrams. The interfaces on PCIe DMA controller are also similar
to the one on embeeded ARM in Zynq FPGAs. Two different form-factors of same
product can be easily develop by using either PCIe DMA or Zynq ARM core. A
tabletop instrument can use a Zynq to run Linux and provide an interface to
the world by touch-screen display or TCP/UDP server. On the other hand, a
mezzanine card based solution (e.g. MicroTCA) can use PCIe DMA to provide a
link to the main CPU in crate.&lt;/p&gt;
&lt;p&gt;Altera also provides similar modules, such as Cyclone V Avalon-MM Interface
(https://www.altera.com/literature/ug/ug_c5_pcie_avmm.pdf).&lt;/p&gt;
&lt;h2&gt;Tip #86&lt;/h2&gt;
&lt;p&gt;When talking about ChipScope the signal attribute &lt;code&gt;keep&lt;/code&gt; should be mentioned,
since it often provides a way to find the post-synthesis nets. The &lt;code&gt;keep&lt;/code&gt;
attribute could also be combined with &lt;code&gt;debug&lt;/code&gt; attribute for easier identification
of signals.&lt;/p&gt;
&lt;p&gt;Verilog example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;(* keep = &amp;quot;true&amp;quot;, mark_debug = &amp;quot;true&amp;quot; *)&lt;/span&gt; &lt;span class="n"&gt;wire&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;signal_to_be_dbged&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Tip #90&lt;/h2&gt;
&lt;p&gt;UCF constants are completely out of date, and were replaced by an equivalent of
Synopsys Design Contraints in Vivado.&lt;/p&gt;
&lt;h2&gt;Tip #93&lt;/h2&gt;
&lt;p&gt;There is a parameter called &lt;code&gt;cost table&lt;/code&gt; between the options for placer, but the
description would suggest that this may be better called seed, since it provides
a starting point for randomized algorithm (placement).&lt;/p&gt;
&lt;h2&gt;Tip #97&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt; is a more-popular fork of Hudson CI. With a good
support for tcl, Vivado offers a reasonable easy way to automate the compilation
of the entire project directly from the source code in the repository.&lt;/p&gt;
&lt;p&gt;Another tools which could be added to this list is &lt;a href="http://www.ohwr.org/projects/hdl-make"&gt;hdlmake&lt;/a&gt;
which is meant to be an equivalent of Make for FPGA projects. Currently it is
not able to tackle more complex compilation procedures, such as re-compiling
vendor IP cores or handling Vivado Block Diagrams.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Tue, 18 Oct 2016 23:00:00 +0200</pubDate><guid isPermaLink="false">tag:,2016-10-18:www.j-marjanovic.io/books-read-e-stavinov-100-power-tips-for-fpga-designers.html</guid><category>FPGA</category><category>Xilinx</category></item><item><title>Debugging Linux start-up on Altera Cyclone V SoC with OpenOCD</title><link>www.j-marjanovic.io/debugging-linux-start-up-on-altera-cyclone-v-soc-with-openocd.html</link><description>&lt;p&gt;This blog post will show you how one can use the OpenOCD debugger with Altera
Cyclone V SoC. Altera Cyclone V SoC is a very interesting integrated circuit,
combining dual-core ARM processor and a decent FPGA, allowing a wide variety
of possibilities to partition the application between the two.&lt;/p&gt;
&lt;p&gt;Xilinx offers Xilinx SDK as the tool to program and debug their MicroBlaze
soft-core and ARM cores in their Zynq FPGAs. Altera on the other hand has two
different tools to program and debug their portfolio of processors. There is
Nios II EDS which provides support for Nios soft-core processor and there is 
ARM DS-5 Development Studio, which provides support for ARM cores in Altera SoCs. While I believe
DS-5 can be useful tool, unfortunately the free-as-a-beer &lt;a href="https://developer.arm.com/products/software-development-tools/ds-5-development-studio/editions/customized-editions/altera/community-edition"&gt;DS-5 Community Edition&lt;/a&gt;
only allows debugging Linux user-space applications. In order to use it, the 
Linux should be up and running in order to run gdbserver on processor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Debug options in DS-5 Altera Community Edition" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/ds5_debug_options.png" style="max-width:100%; width: auto; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;When doing initial bring-up or experimenting this may not be the case. If
there is something wrong with a kernel, a device tree or the drivers, one can
easily find himself with a non-responsive system. Even in this case the JTAG
debugger offers a side-door access to the system. This greatly simplifies
determining the cause which lead to the system halt.&lt;/p&gt;
&lt;h1&gt;Installation of OpenOCD&lt;/h1&gt;
&lt;h2&gt;OpenOCD&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://openocd.org/"&gt;OpenOCD&lt;/a&gt; is a free and open-source on-chip debugger. It
provides a link between hardware components and a command line interface,
which can be used to control and monitor the hardware over JTAG interface. It
can also be interfaced with GDB (GNU Debugger) integrated with Eclipse, to
provide a graphical way to debug programs. If you want to know more, at the
bottom of &lt;a href="http://openocd.org/documentation/"&gt;OpenOCD Documentation page&lt;/a&gt; is
a link to the presentation on FOSDEM 2006.&lt;/p&gt;
&lt;p&gt;First we need to install all needed tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libtool autotools-dev automake libusb-1.0 libhidapi-dev pkg-config git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we get the source code from OpenOCD SourceForge repository. I have used the
latest available commit in master, which was the one with a git tree-ish value
of &lt;code&gt;12ff09f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://git.code.sf.net/p/openocd/code openocd-code

root@eee2f562f8f2:/openocd-code2# git show HEAD
commit 12ff09f7f27a707fe42226262f55b8ce8351cbf9
Author: Esben Haabendal &amp;lt;esben@haabendal.dk&amp;gt;
Date:   Fri Nov 27 09:13:36 2015 +0100
cfi: Add support for strangely endianness broken SoC implementations
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perform all needed steps to compile the code (have a look in &lt;code&gt;INSTALL&lt;/code&gt; for
detailed instructions):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd openocd-code
aclocal
./bootstrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the end of configure step make sure that support for Altera USB-Blaster II
and CMSIS-DAP Debugger are configured. The output should look something like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure

...

OpenOCD configuration summary
--------------------------------------------------
MPSSE mode of FTDI based devices        yes (auto)
Segger J-Link JTAG Programmer           yes (auto)
ST-Link JTAG Programmer                 yes (auto)
TI ICDI JTAG Programmer                 yes (auto)
Keil ULINK JTAG Programmer              yes (auto)
Altera USB-Blaster II Compatible        yes (auto)
Versaloon-Link JTAG Programmer          yes (auto)
OSBDM (JTAG only) Programmer            yes (auto)
eStick/opendous JTAG Programmer         yes (auto)
Andes JTAG Programmer                   yes (auto)
USBProg JTAG Programmer                 no
Raisonance RLink JTAG Programmer        no
Olimex ARM-JTAG-EW Programmer           no
CMSIS-DAP Compliant Debugger            yes (auto)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we just need to compile everything and install the openocd binary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make

sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;code&gt;udev&lt;/code&gt; rules for USB-Blaster&lt;/h2&gt;
&lt;p&gt;After the OpenOCD is installed, we must take care to set the correct &lt;code&gt;udev&lt;/code&gt;
rules (access permisions for USB device). As a workaround I have been chmod-ing
the &lt;code&gt;/dev/bus/usb/002/&lt;/code&gt; folder to &lt;code&gt;0666&lt;/code&gt; and that gave me correct permission
to use the USB-Blaster from Altera Quartus software.&lt;/p&gt;
&lt;p&gt;The more elegant solution is described in the comment section of &lt;a href="http://www.fpga-dev.com/altera-usb-blaster-with-
ubuntu/"&gt;ALTERA USB-BLASTER
WITH UBUNTU 14.04&lt;/a&gt;. The USB-Blaster has multiple personalities (one for FPGA JTAG and
one for ARM JTAG), the udev rule therefore needs to specify both 6010 and
6810 as the targeted devices.&lt;/p&gt;
&lt;p&gt;Create /etc/udev/rules.d/51-usbblaster.rules with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; For Altera USB-Blaster on SoCkit&lt;/span&gt;
&lt;span class="x"&gt;SUBSYSTEM==&amp;quot;usb&amp;quot;,\&lt;/span&gt;
&lt;span class="x"&gt;ENV&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;DEVTYPE}==&amp;quot;usb_device&amp;quot;,\&lt;/span&gt;
&lt;span class="x"&gt;ATTR&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;idVendor}==&amp;quot;09fb&amp;quot;,\&lt;/span&gt;
&lt;span class="x"&gt;ATTR&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;idProduct}==&amp;quot;6010|6810&amp;quot;,\&lt;/span&gt;
&lt;span class="x"&gt;MODE=&amp;quot;0666&amp;quot;,\&lt;/span&gt;
&lt;span class="x"&gt;NAME=&amp;quot;bus/usb/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;BUSNUM}/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;DEVNUM}&amp;quot;,\&lt;/span&gt;
&lt;span class="x"&gt;RUN+=&amp;quot;/bin/chmod 0666 %c&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;udev&lt;/code&gt; rules should be reloaded with the following command to take effect
immediately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo udevadm control --reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;First checks&lt;/h2&gt;
&lt;p&gt;Now we can try running Altera &lt;code&gt;jtagconfig&lt;/code&gt; program to check if the permissions
are OK. When the SoCkit board is attached, the output should look something
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~ ~/altera/16.0/quartus/bin/jtagconfig                                                                                            
1) CV SoCKit [1-1.1]                          
  02D020DD   5CSEBA6(.|ES)/5CSEMA6/..
  4BA00477   SOCVHPS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can also try running OpenOCD:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  ~ openocd -f interface/altera-usb-blaster2.cfg -f target/altera_fpgasoc.cfg
Open On-Chip Debugger 0.10.0-dev-00324-g12ff09f (2016-06-26-19:19)
Licensed under GNU GPL v2
For bug reports, read
http://openocd.org/doc/doxygen/bugs.html
Warn : Adapter driver &amp;#39;usb_blaster&amp;#39; did not declare which transports it allows; assuming legacy JTAG-only
Info : only one transport option; autoselect &amp;#39;jtag&amp;#39;
adapter speed: 1000 kHz
cycv_dbginit
Info : Altera USB-Blaster II (uninitialized) found
Info : Loading firmware...
Info : Waiting for renumerate...
Info : Waiting for renumerate...
Info : Altera USB-Blaster II found (Firm. rev. = 1.36)
Info : This adapter doesn&amp;#39;t support configurable speed
Info : JTAG tap: fpgasoc.dap tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)
Info : JTAG tap: fpgasoc.fpga.tap tap/device found: 0x02d020dd (mfg: 0x06e (Altera), part: 0x2d02, ver: 0x0)
Info : DAP transaction stalled (WAIT) - slowing down
Info : DAP transaction stalled (WAIT) - slowing down
Info : DAP transaction stalled (WAIT) - slowing down
Info : fpgasoc.cpu.0: hardware has 6 breakpoints, 4 watchpoints
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives us information that ARM core was recognized, this is therefore the
correct command to use it later with the GDB debugger.&lt;/p&gt;
&lt;h2&gt;Eclipse plug-in&lt;/h2&gt;
&lt;p&gt;Now we just have to set-up the Eclipse with the OpenOCD plug-in. I have used the
newest version of Eclipse available at the moment, Eclipse Neon.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eclipse Neon" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_neon.png" style="width:500px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gnuarmeclipse.github.io/plugins/install/"&gt;This page&lt;/a&gt; describes how to
install the OpenOCD plug-in for Eclipse, the easiest way is to drag and drop
install icon into a running instance of Eclipse.&lt;/p&gt;
&lt;p&gt;Once this is set, we can create a new project. For simpler (bare-metal)
project it would probably make sense to go with "Makefile Project with
Existing Code". For a Linux kernel debugging the plain Project will be enough.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_new_project.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_new_project_name.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Now let's find the original Linux binary. When building kernel with Yocto, the
created file in deploy directory is &lt;code&gt;zimage&lt;/code&gt; file. This is a compressed image
with all debugging symbols stripped out. It is optimized to be used in
embedded environment. We need to find the original &lt;code&gt;vmlinux&lt;/code&gt; image before the
debugging symbols were stripped out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  tmp git:(jethro) find . -name vmlinux                                       
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.3+gitAUTOINC+5938523338-r0/
linux-cyclone5-standard-build/arch/arm/boot/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.3+gitAUTOINC+5938523338-r0/
linux-cyclone5-standard-build/arch/arm/boot/compressed/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.3+gitAUTOINC+5938523338-r0/
linux-cyclone5-standard-build/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.4+gitAUTOINC+969478b841-r0/
linux-cyclone5-standard-build/arch/arm/boot/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.4+gitAUTOINC+969478b841-r0/
linux-cyclone5-standard-build/arch/arm/boot/compressed/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.4+gitAUTOINC+969478b841-r0/
linux-cyclone5-standard-build/vmlinux
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are various images from various different runs (and different versions
of the kernel).&lt;/p&gt;
&lt;p&gt;In Eclipse we then select: &lt;code&gt;Run -&amp;gt; Debug Configurations...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we just need to setup the correct parameters for debug. Under "Main
tab" we need to select the right Linux binary image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_main.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;Under "Debugger tab" we need to set-up the OpenOCD setting and use the correct
gdb (the one produced by Yocto):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_debugger.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;If we want to attach to a running kernel, we should un-check "Inital Reset"
and "Load executable" fields under "Startup tab".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_startup.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;And we are good to go. After pressing the "Debug" button, the debugging
perspective will show up. Now we can access &lt;code&gt;__log_buf&lt;/code&gt; buffer to determine
what is stopping the kernel boot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_final.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Tue, 12 Jul 2016 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:,2016-07-12:www.j-marjanovic.io/debugging-linux-start-up-on-altera-cyclone-v-soc-with-openocd.html</guid><category>FPGA</category><category>Altera</category><category>Linux</category><category>OpenOCD</category></item><item><title>Books read: 97 Things Every Programmer Should Know</title><link>www.j-marjanovic.io/books-read-97-things-every-programmer-should-know.html</link><description>&lt;p&gt;I have seen this book referenced on several occasions when the software
engineering was discussed, but I never had the time to read from first page to
the last. I bought the dead-tree version, which gives you a better motivation
to read the whole book. Here are my comments and thoughts about each
contribution in this book.&lt;/p&gt;
&lt;p style="width:70%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="97 Things Every Programmer Should Know" src="www.j-marjanovic.io/images/97_thing_every_programmer_should_know.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;(1) Act with Prudence by Seb Rose&lt;/h2&gt;
&lt;p&gt;Technical debt is (similarly to a cash debt) a good way to kickstart the
development, but I agree with the author that is should be kept under control
and paid back as soon as possible. I much enjoy when a sub-optimal solution
gets fixed and the worries about possible problems with it vanish away.&lt;/p&gt;
&lt;h2&gt;(2) Apply Functional Programming Principles by Edward Garson&lt;/h2&gt;
&lt;p&gt;Yes, I am already excited about this book. The functional programming
principles (even in OO code) greatly improve testability of smaller components.
It also gives a programmer a different insight on how algorithms work, which
its a little more detached from how a classical computer works. Programming in
C feels like explaining complicated science to a 7 year old ("lets have a
number i, which is is set to 0. each time we will check if this number is less
than some other number n..."), while programming in Haskell feels like a
discussion with a philosopher ("there is this function fact for which the
value for 1 is 1. - oh, i see. - and for every other positive number, the
value is the argument itself multiplied by the value of function for an
argument minus one. - well, this is everything i needed to know about this
function, i think i know how to calculate it."&lt;/p&gt;
&lt;h2&gt;(3) Ask, "What Would the User Do?" (You Are Not the User) by Giles Colborne&lt;/h2&gt;
&lt;p&gt;This contribution is quite similar to Joel Spolsky
&lt;a href="http://www.joelonsoftware.com/uibook/chapters/fog0000000064.html"&gt;comment&lt;/a&gt; on
how to test the use interface: "One good way to evaluate the usability of a
program or dialog you've never seen before is to act a little stupid".  The
important reminder to take away from this is to try being conservative with
the user interface, to minimize the learning how to use your program or
application.&lt;/p&gt;
&lt;h2&gt;(4) Automate Your Coding Standard by Filip van Laenen&lt;/h2&gt;
&lt;p&gt;Nicely formatted code demonstrates that the person who wrote it has put in a
little effort to make it nicer and that the same person is somebody who like
to keep things organized. On the contrary, when you see a messy code with
sections of the code commented out, you know that there is almost surely
something wrong with its behavior as well. Clearly defined language-prescribed
formating standard (such as PEP8) and the tools to support it (such as pep8
tool and pylint) are much welcomed. Meanwhile, the &lt;a href="htt
ps://github.com/isocpp/CppCoreGuidelines/blob/5eb0b587af06dc5d1d9cda0dd8c6b399
bdc1e230/CppCoreGuidelines.md"&gt;C++ coding guidelines&lt;/a&gt; currently looks more like a brainstorming
session (why is there std::endl if you are not supposed to use it?)&lt;/p&gt;
&lt;h2&gt;(5) Beauty Is in Simplicity by Jørn Ølmheim&lt;/h2&gt;
&lt;p&gt;Simple solution are often the ones who work better, not only in software but
also in other fields, such as rock music. Trying to write the most legendary
rock riff of all time? You only need 4 notes (Yngwie does not agree with this:
&lt;a href="https://www.youtube.com/watch?v=QHZ48AE3TOI"&gt;More is more&lt;/a&gt; ). As an example
lets look at one  of the biggest code bases ever made: Linux kernel. The style
itself (tabs are 8 spaces, line is 80 characters) prevent you from writing too
complicated solution. The style guide for Linux kernel is a little extreme,
but since the kernel should be as lean as possible it produces indisputably
good results.&lt;/p&gt;
&lt;h2&gt;(6) Before You Refactor by Rajith Attapattu&lt;/h2&gt;
&lt;p&gt;This contribution is again very similar to one of Joel Spolsky's &lt;a href="http://www.joelonsoftware.com/articles/fog0000000069.html"&gt;blog
posts&lt;/a&gt;. Since
reading code is harder than writing it everybody assumes that a complete
rewrite will create better code. All the ugly patches in the code are actual
bugfixes and the software (although with ugly code) works.&lt;/p&gt;
&lt;h2&gt;(7) Beware the Share by Udi Dahan&lt;/h2&gt;
&lt;p&gt;Using already written libraries is a nice practice, and this contribution
talks about creating unwanted dependencies in the code base. The discussion
here regards the internally developed libraries. The case described in this
contribution can be also analyzed in terms of the time spent maintaining
reusable code, something which is described in The Mythical Man-Month. Use of
public (external) stable libraries should be encouraged, although I would in
the controversial case of leftPad function prefer to have the leftPad function
embedded directly in code.&lt;/p&gt;
&lt;h2&gt;(8) The Boy Scout Rule by Robert C. Martin&lt;/h2&gt;
&lt;p&gt;This is one of the most famous contribution in this book, I don't think there
is much to add to it. It is always nice when you look back at the clean
campground (I sometimes like to admire the cleanup in side-by-side diff).&lt;/p&gt;
&lt;h2&gt;(9) Check Your Code First Before Looking to Blame Others by Allan Kelly&lt;/h2&gt;
&lt;p&gt;I would also like to add that a really good understanding of the language
(read the standard) and the compiler (read  the manual) can help you resolve
the problem without blaming the compiler. Personally I know about some miner
differences between Verilog compilers from Xilinx and Altera, which could let
someone think that the compiler is buggy.&lt;/p&gt;
&lt;h2&gt;(10) Choose Your Tools with Care by Giovanni Asproni&lt;/h2&gt;
&lt;p&gt;The author of this contribution mentions that he likes to isolate external
tools from his own business logic. I see this approach sometimes in open
source FPGA development when a wrapper around some commonly used IP cores is
build (e.g. wrapper around block RAM for both Altera and Xilinx which gets
chosen based on a parameter or a macro).&lt;/p&gt;
&lt;h2&gt;(11) Code in the Language of the Domain by Dan North&lt;/h2&gt;
&lt;p&gt;This contribution could be summarized as a call to use sensible
variable/functions/object/methods names. This could be as well extended to
writing informative comments, and not have comments like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (maxLim &amp;lt; 0) // checks if max limit is negative
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;(12) Code Is Design by Ryan Brush&lt;/h2&gt;
&lt;p&gt;The abstract process of making virtual artifacts (software) from nothing
cannot be compared with construction process. The possibility to experiment
with the real product gives direct feedback, which can be easily incorporated
into design process. I often see everyday physical objects which weren't
optimized to perfection, probably because of high iteration cost. The location
of power button on my HTC Desire is one of this design flaws, it cannot be
reached without changing the grip on the phone.&lt;/p&gt;
&lt;h2&gt;(13) Code Layout Matters by Steve Freeman&lt;/h2&gt;
&lt;p&gt;Indentation of the code is important, it provides the overview of the
complexity on the first glance. I look forward to GCC6 new warning on wrongly
indented C/C++ code.&lt;/p&gt;
&lt;h2&gt;(14) Code Reviews by Mattias Karlsson&lt;/h2&gt;
&lt;p&gt;Code reviews are important because they introduce all-seeing-eye in the code
writing process, and this makes programmers care more about code quality. One
cannot just make a ugly patch and hide in somewhere in the code base. The
ultimate code review is the release of the code to the public or to the
clients. In this case one can be sure that the company will be judged by the
quality of the released code. The same is true for the examples which
demonstrates the use of someone own tools.&lt;/p&gt;
&lt;p&gt;To be continued in the next blog post...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 05 Jun 2016 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:,2016-06-05:www.j-marjanovic.io/books-read-97-things-every-programmer-should-know.html</guid><category>Software Engineering</category></item><item><title>HDL data type for Python parser implementations</title><link>www.j-marjanovic.io/hdl-data-type-for-python-parser-implementations.html</link><description>&lt;p&gt;Recently I had to implement a parser for the PCIe protocol. The data was
captured with Xilinx ChipScope and saved as TSV (tab-separated value) text file.
I wanted to implement a parser in Python, my favorite language for this kind of
tasks. I have stumbled to a problem when I needed an elegant way to represent
the vector of bits of arbitrary length. I have found several libraries but none
of them satisfied my needs, so I put together a small class, which mimics
SystemVerilog vectors.&lt;/p&gt;
&lt;script src="https://gist.github.com/j-marjanovic/348499e6cae3622554a4.js"&gt;&lt;/script&gt;

&lt;p&gt;Let's have a look at other alternatives which were available but did not
completely suit my needs. I wanted a vector slicing syntax which is similar to
the one in SystemVerilog and it allows to catch the typos quickly.&lt;/p&gt;
&lt;h2&gt;bitstring&lt;/h2&gt;
&lt;p&gt;From their site: &lt;a href="https://pypi.python.org/pypi/bitstring/3.1.3"&gt;bitstring&lt;/a&gt; is a
pure Python module designed to help make the creation and analysis of binary
data as simple and natural as possible.&lt;/p&gt;
&lt;p&gt;It quick test finds two things which I would did not like: taking slice wider
than vector length pads the resulting vector with zeros and the slice indexes
are inverted compared to more used [higher_limit:lower_limit] notation in HDLs.
The output of the slicing is a closed interval, which is the behavior I would
expect.&lt;/p&gt;
&lt;h2&gt;BitArray&lt;/h2&gt;
&lt;p&gt;The first thing which comes in mind is that there is not an easy way to create a
bitarray and initialize it from int in a single step (using constructor). The
only way to initialize BitArray is to use binary-formated string. This requires
a call of bin() function and dropping first two characters if your data is
stored as an int. At this point one can already start thinking of implementing
it's own class. The slicing has the same behavior as bitstring, which I did not
like for the application I need.&lt;/p&gt;
&lt;h2&gt;A simple solution on Stack Overflow&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href="http://stackoverflow.com/a/150411/4059686"&gt;similar solution&lt;/a&gt; already
posted on Stack Overflow, however it lacks an equality operator.&lt;/p&gt;
&lt;h2&gt;MyHDL&lt;/h2&gt;
&lt;p&gt;Since MyHDL is a way to write HDL with Python it comes as obvious choice to use
it in a simple Python parser. MyHDL has a &lt;em&gt;intbv&lt;/em&gt; data type which is very
similar to vectors in Verilog and VHDL. However, there are some minor things
which discouraged me from using it in my parser.&lt;/p&gt;
&lt;p&gt;Lets have a look at a modified version of the VerilogBits unit test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;myhdl&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testmyhdlintbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_equality&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0AB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertNotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xCD&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slicing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xA&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;abcd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xABCD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xA&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xD&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slice_up_vect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_invalid_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dummy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myhdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xAB&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This results are 3 failing tests: test_invalid_slice, test_slicing, and
test_unpack. test_invalid_slice fails because taking a slice wider than a vector
width produces fills the missing bits with zero. This is similar to
SystemVerilog vector of bits, which is a 2-level data type (it can be only 0 or
1). I prefer more rigorous behavior when slicing vectors, since errors like that
can be quite hard to catch. The VerilogBits throws an exception when an invalid
slice is requested.&lt;/p&gt;
&lt;p&gt;If the zero padding problem with MyHDL is something I could live with, the other
two failing test are much more discouraging for someone who sometimes dreams
(System)Verilog. The &lt;a href="http://docs.myhdl.org/en/stable/manual/hwtypes.html#bit-slicing"&gt;bit slicing in
MyHDL&lt;/a&gt; is half-
open as is expected in Python and not a closed interval as expected from HDLs
(e.g.  to get the LSB one should write [8:0] instead of [7:0]). Again, this is
just a convention and the software world is using the half-open interval for
decades (&lt;a href="https://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF"&gt;E.W.Dijkstra: Why numbering should start at
zero&lt;/a&gt;). But if your
parser in Python is there to find bugs in your SystemVerilog code, it makes much
more sense to use the same notation in both languages.&lt;/p&gt;
&lt;h2&gt;SystemVerilog&lt;/h2&gt;
&lt;p&gt;The SystemVerilog provide all the necessary tools to effectively manipulate bits
(duh), but the Python with the generators, list comprehensions and dictionaries
(well, SystemVerilog does have associative array) is much more elegant language.
The ability to test commands on-the-fly in the interpreter is also much
welcomed.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 15 Nov 2015 22:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2015-11-15:www.j-marjanovic.io/hdl-data-type-for-python-parser-implementations.html</guid><category>Python</category><category>Verilog</category><category>FPGA</category><category>HDL</category></item><item><title>Compilation of Linux kernel for Raspberry Pi</title><link>www.j-marjanovic.io/compilation-of-linux-kernel-for-raspberry-pi.html</link><description>&lt;p&gt;Yesterday I got my Raspberry Pi 2, the evolution of the legendary Raspberry Pi. 
The evolution is the right word to describe what has changed compared to 
the previous version. The processor it is now a quad-core, it runs faster,
it has got a newer instruction set (ARMv7) and the board now incorporates 1GB
of RAM and 4 USB connector. The RCA jack is no longer present, the additional
place is being occupied by a larger extension header instead. A welcomed update
of already great hardware, in my opinion (for people complaining that it
can't play 4K video, run desktop version of the Windows, ..., well, consider
buying proper computer, RPi was meant to be cheep enough to tinker with
without fear of breaking something).&lt;/p&gt;
&lt;p&gt;I am the kind of the person which thinks that compiling Linux kernel would be 
great a way to spend the Sunday. Since one of my projects with RPi includes
custom driver for communication with FPGA, I needed Linux headers and &lt;em&gt;kbuild&lt;/em&gt;
system for building kernel modules (those who are not familiar with the procedure,
imagine that you are building a program linked with libraries; in this case a 
program is a kernel module and kernel and its modules represent the libraries).&lt;/p&gt;
&lt;p&gt;On the Ubuntu (and I think on other Debian systems but I am not 100% sure) you
can get kernel headers and source directly from the Debian repository, something
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above command will install the headers the headers for the currently running 
kernel. It copies the header files to /usr/src and creates link in /lib/modules/,
this gives the user tools needed to compile kernel modules.&lt;/p&gt;
&lt;h2&gt;The hard way&lt;/h2&gt;
&lt;p&gt;Before you continue reading I would just like to inform you that the procedure 
described in this section did not yield desired result. Although I managed to 
get a kernel image, the &lt;em&gt;kbuild&lt;/em&gt; system did not work. In Thomas Alva Edison style
 I want to present a method which does not work, but at least we know it does not work. The working (and easier) procedure is described in the next section.&lt;/p&gt;
&lt;p&gt;Initially I wanted to get the headers in the same way as I would on Ubuntu, by
using apt (Advanced Packaging Tool). Searching for available packages did not
show the package needed (the Raspbian was running the 3.18.7-v7+ kernel).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pi@raspberrypi ~ $&lt;/span&gt; sudo aptitude search linux-headers
&lt;span class="go"&gt;v   linux-headers                                   -                                                           &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-all                        - All header files for Linux 3.10 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-all-armhf                  - All header files for Linux 3.10 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-common                     - Common header files for Linux 3.10-3                      &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.10-3-rpi                        - Header files for Linux 3.10-3-rpi                         &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-all                        - All header files for Linux 3.12 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-all-armhf                  - All header files for Linux 3.12 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-common                     - Common header files for Linux 3.12-1                      &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.12-1-rpi                        - Header files for Linux 3.12-1-rpi                         &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-all                  - All header files for Linux 3.18 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-all-armhf            - All header files for Linux 3.18 (meta-package)            &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-common               - Common header files for Linux 3.18.0-trunk                &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-rpi                  - Header files for Linux 3.18.0-trunk-rpi                   &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.18.0-trunk-rpi2                 - Header files for Linux 3.18.0-trunk-rpi2                  &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-all                       - All header files for Linux 3.2 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-all-armhf                 - All header files for Linux 3.2 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-common                    - Common header files for Linux 3.2.0-4                     &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.2.0-4-rpi                       - Header files for Linux 3.2.0-4-rpi                        &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-all                     - All header files for Linux 3.6 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-all-armhf               - All header files for Linux 3.6 (meta-package)             &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-common                  - Common header files for Linux 3.6-trunk                   &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-3.6-trunk-rpi                     - Header files for Linux 3.6-trunk-rpi                      &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-rpi                               - Header files for Linux rpi configuration (meta-package)   &lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-rpi-rpfv                          - This metapackage will pull in the headers for the raspbian&lt;/span&gt;
&lt;span class="go"&gt;p   linux-headers-rpi2-rpfv                         - This metapackage will pull in the headers for the raspbian&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tried my luck with &lt;em&gt;linux-headers-rpi2-rpfv&lt;/em&gt; which installed headers for
kernel 3.18.0. That might sound close enough, but Linux refuses modules which
have not been compiled with exactly the same same kernel. &lt;/p&gt;
&lt;p&gt;So I decided to recompile the kernel on my laptop running Ubuntu. The procedure
of compiling on one type of machine (in this case Intel x86_64 processor) for
another (in this case ARM processor) is called cross-compilation.&lt;/p&gt;
&lt;p&gt;The process of cross-compilation is described here: &lt;a href="http://elinux.org/Raspberry_Pi_Kernel_Compilation"&gt;Raspberry Pi Kernel Compilation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everything went fine, I got the kernel image and /lib/modules directory. The only
thing that the guide does not mention is that &lt;em&gt;make modules_install&lt;/em&gt; creates 
symbolic links to the original directory. I copied the entire kernel directory
to /usr/src and recreated symbolic links, so everything should be fine.&lt;/p&gt;
&lt;p&gt;At this point if everything went OK we would have a working kernel and its 
&lt;em&gt;kbuild&lt;/em&gt; system which gives us the tools to compile the kernel modules out of the
tree (in a separate directory). The RPi boots up, which is a good sign, meaning
that there is nothing wrong with the kernel image. &lt;/p&gt;
&lt;p&gt;However, when I try to compile the kernel module, I get the error saying that 
there is a syntax error in script in kernel module 
(the same problem as described &lt;a href="http://stackoverflow.com/questions/17282461/scripts-recordmcount-syntax-error-when-i-try-to-build-a-linux-kernel-module-o"&gt;here&lt;/a&gt;. The answer by Joe C states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyway, if you cross compile you don't get a /usr/src/linux-header-x.x.x/scripts dir that's usable on your target system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since I previously downloaded another kernel headers from Debian repository,
I tired copying the scripts directory from there:&lt;/p&gt;
&lt;p&gt;pi@raspberrypi /usr/src/linux-headers-3.18.0-trunk-rpi2 $ sudo cp -rv scripts/ ../linux-sources-3.18.8-v7+/&lt;/p&gt;
&lt;p&gt;This fixed the compilation problem just to cause complete disaster when I
tried inserting the module. The following kernel message (&lt;em&gt;dmesg&lt;/em&gt; command)
shows nothing promising:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 4246.164155] Unable to handle kernel paging request at virtual address fe220b30
[ 4246.176292] pgd = b5dd8000
[ 4246.183812] [fe220b30] *pgd=00000000
[ 4246.192196] Internal error: Oops: 5 [#1] PREEMPT SMP ARM
[ 4246.202324] Modules linked in: pi64_dev(O+) snd_bcm2835 snd_soc_pcm512x_i2c snd_soc_wm8804 snd_soc_pcm512x snd_soc_tas5713 regmap_spi regmap_i2c snd_soc_bcm2708_i2s regmap_mmio snd_soc_core snd_compress snd_pcm_dmaengine snd_pcm snd_seq snd_seq_device snd_timer r8712u(C) snd spi_bcm2708 i2c_bcm2708
[ 4246.239611] CPU: 3 PID: 3468 Comm: insmod Tainted: G         C O   3.18.8-v7+ #1
[ 4246.252306] task: b87aa840 ti: b760a000 task.ti: b760a000
[ 4246.262985] PC is at load_module+0x1a64/0x1f0c
[ 4246.272699] LR is at load_module+0x1a50/0x1f0c
[ 4246.282373] pc : [&amp;lt;800940d4&amp;gt;]    lr : [&amp;lt;800940c0&amp;gt;]    psr: 90000013
[ 4246.282373] sp : b760be88  ip : 7f110770  fp : b760bf44
[ 4246.304401] r10: 00000000  r9 : 7f110600  r8 : 80536d44
[ 4246.314883] r7 : b86dc8c4  r6 : fe220b1c  r5 : 7f11060c  r4 : b760bf48
[ 4246.326685] r3 : 00000000  r2 : b760be70  r1 : b7555280  r0 : 807f2a3c
[ 4246.338495] Flags: NzcV  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
[ 4246.350916] Control: 10c5387d  Table: 35dd806a  DAC: 00000015
[ 4246.361932] Process insmod (pid: 3468, stack limit = 0xb760a238)
[ 4246.373206] Stack: (0xb760be88 to 0xb760c000)
[ 4246.382808] be80:                   7f11060c 00007fff 8009168c ffffffff b760bee4 bd949000
[ 4246.396352] bea0: 00000000 7f11060c 00000000 b760bedc 807e4d78 7f110648 b760a000 7f110770
[ 4246.409938] bec0: 00001f4b 806c9bdc ba7b961c b760a000 b9330000 808ab8fc 76fd3000 00000000
[ 4246.423538] bee0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
[ 4246.437137] bf00: 00000000 00000000 00000000 00000000 00000000 00000000 00000080 00001f4b
[ 4246.450707] bf20: 76fd3000 76f91948 00000080 8000f0a4 b760a000 00000000 b760bfa4 b760bf48
[ 4246.464292] bf40: 80094664 8009267c bd949000 00001f4b bd949f3c bd949de3 bd94acc4 00000850
[ 4246.477932] bf60: 00000940 00000000 00000000 00000000 0000001f 00000020 00000017 00000014
[ 4246.491605] bf80: 00000010 00000000 00000000 7eb7861c 00000000 7768b038 00000000 b760bfa8
[ 4246.505297] bfa0: 8000ee20 80094588 7eb7861c 00000000 76fd3000 00001f4b 76f91948 76fd3000
[ 4246.519052] bfc0: 7eb7861c 00000000 7768b038 00000080 7768af80 00001f4b 76f91948 00000000
[ 4246.532810] bfe0: 00000000 7eb785c4 76f88fb4 76ef3ab4 60000010 76fd3000 d466662e d5f7abd0
[ 4246.546635] [&amp;lt;800940d4&amp;gt;] (load_module) from [&amp;lt;80094664&amp;gt;] (SyS_init_module+0xe8/0xfc)
[ 4246.560087] [&amp;lt;80094664&amp;gt;] (SyS_init_module) from [&amp;lt;8000ee20&amp;gt;] (ret_fast_syscall+0x0/0x48)
[ 4246.573935] Code: e51bc088 e15c0006 e2466008 0a000009 (e5963014) 
[ 4246.604593] ---[ end trace 8e4bd0982f9f1fd0 ]---
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It basically says that there was an error trying to access the wrong part of the
memory from the &lt;em&gt;insmod&lt;/em&gt; process.&lt;/p&gt;
&lt;p&gt;At this point I decided to stop experimenting with this approach. I was getting
frustrated with constant fighting with all kind of errors. When I initially started
writing this blog post I wanted to describe the method to cross-compile Linux
kernel image and &lt;em&gt;kbuild&lt;/em&gt; build system. Unfortunately, although it may sound
appealing to speed up the process by cross compiling on x86 machine, the 
complication with various stuff make it more time consuming that compiling directly
on Raspberry Pi. I know myself good enough that I know I wont quit this easy.
I will probably return to this problem on some other occasion and tried again,
be assured that I will write a blog post If I succeed.&lt;/p&gt;
&lt;h2&gt;The easy way&lt;/h2&gt;
&lt;p&gt;At the end I dropped the cross-compilation idea and resorted to compiling kernel
on the RPi itself. This can also serve as a performance test of the new RPi. 
I overclocked it to 1000MHz (using raspi-config I selected the RPi2 setting).&lt;/p&gt;
&lt;p&gt;The compilation of kernel took something less than 2 hours, quite decent result
compared to 17 minutes it takes on my laptop with not-so-new i3 and 6GB of RAM.&lt;/p&gt;
&lt;p&gt;The following figure shows the temperature during the compilation. The temperature
was captured every minute with a Cron job which read from 
&lt;strong&gt;/sys/class/thermal/thermal_zone0/temp&lt;/strong&gt;&lt;/p&gt;
&lt;p style="width:90%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="RPi temperature" src="www.j-marjanovic.io/images/pi_temp_during_compile.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, using freshly compiled kernel on RPi, I managed to get compile my 
module and to load it in kernel (debug message from kernel):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[   38.324756] ============================================&lt;/span&gt;
&lt;span class="go"&gt;[   38.324786]        Pi64 driver by Jan Marjanovic        &lt;/span&gt;
&lt;span class="go"&gt;[   38.324796] &lt;/span&gt;
&lt;span class="go"&gt;[   38.324808]   built: Mar  1 2015 11:38:10&lt;/span&gt;
&lt;span class="go"&gt;[   38.324818] ============================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 01 Mar 2015 19:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2015-03-01:www.j-marjanovic.io/compilation-of-linux-kernel-for-raspberry-pi.html</guid><category>Linux</category><category>Raspberry Pi</category></item><item><title>Lattice iCEcube2 on Ubuntu 14.04</title><link>www.j-marjanovic.io/lattice-icecube2-on-ubuntu-1404.html</link><description>&lt;p&gt;/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/synplify_pro: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/synplify_pro: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/c_hdl: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/c_hdl: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/syn_nfilter: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/syn_nfilter: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/m_generic: 186: [: unexpected operator
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/m_generic: 200: [: !=: argument expected
/home/jan/opt/lscc/iCEcube2.2014.12/synpbase/bin/m_generic: 186: [: unexpected operator&lt;/p&gt;
&lt;p&gt;sed -i 's/\/bin\/sh/\/bin\/bash/g' *&lt;/p&gt;
&lt;p&gt;jan@jan-ThinkPad-T510 ~/opt/lscc/iCEcube2.2014.12/synpbase/bin
 % for file in $(ls); do sed -i 's/\/bin\/sh/\/bin\/bash/g' $file; done    19:33:27 on 2015-03-07 
sed: couldn't edit config: not a regular file
jan@jan-ThinkPad-T510 ~/opt/lscc/iCEcube2.2014.12/synpbase/bin
 % &lt;/p&gt;
&lt;p&gt;for file in $(ls -la | grep -E '^[^d]' | awk -F "/" '{print $NF}' ); do echo $file; done &lt;/p&gt;
&lt;p&gt;for file in $(ls -la | tail -n +2 | grep -E '^[^d]' | awk '{print $NF}' ); do sed -i 's/\/bin\/sh/\/bin\/bash/g' $file; done &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 01 Mar 2015 19:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2015-03-01:www.j-marjanovic.io/lattice-icecube2-on-ubuntu-1404.html</guid><category>Lattice</category><category>iCE40</category><category>Linux</category><category>Ubuntu</category></item><item><title>Lattice iCE40 configuration using Raspberry Pi</title><link>www.j-marjanovic.io/lattice-ice40-configuration-using-raspberry-pi.html</link><description>&lt;p&gt;As I mentioned in previous post, I started playing around with Lattice iCE40 FPGA. 
In the last post I did a quick overview of the 
iCE40 tools. The iCEcube2 cannot compete with Xilinx ISE and Altera Quartus II, 
not to mention the Vivado, but since this is a low-cost FPGA the current tool 
offers all you need to do this kind of simple projects (I would definitely recommend
the beginners to stay away from Lattice as it is not as user friendly as vendor X
or vendor A, you need to have some experience to master the work flow). &lt;/p&gt;
&lt;p&gt;Last time I found out that iCEcube2 Programmer runs only on Windows, on GNU/Linux 
you need to find other solutions. How the Programmer works is another interesting
thing. One would expect that is uses JTAG port on FPGA to configure it, but that is
not the case. The Programmer communicates with Atmel microcontroller which programs
Serial NOR Flash memory. Then it reset the FPGA which boots in SPI Master mode, and 
it reads configuration from Flash. &lt;/p&gt;
&lt;p&gt;A quick look at &lt;a href="http://www.latticesemi.com/~/media/Documents/ApplicationNotes/IK/iCE40ProgrammingandConfiguration.pdf?document_id=46502"&gt;TN1248: iCE40 Programming and Configuration&lt;/a&gt; 
shows that it can be programmed also by writing from 
another device (e.g. microprocessor to the SPI port). This is called SPI Slave 
programming mode and it is enabled by holding the line CS_n low at the reset of
the FPGA. &lt;/p&gt;
&lt;p style="width:600px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="iCE40 development board and Raspberry Pi" src="www.j-marjanovic.io/images/ice40_rpi_conf.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;So I tried programming it using Raspberry Pi. I connected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grounds together&lt;/li&gt;
&lt;li&gt;SI on iCE40 to MOSI on RPi&lt;/li&gt;
&lt;li&gt;SO on iCE40 to MISO on RPi (this one is actually not needed)&lt;/li&gt;
&lt;li&gt;SCK on iCE40 to CLK on RPi&lt;/li&gt;
&lt;li&gt;pin GPIO25 on RPi to SS on iCE40 (this one is needed to enter the slave mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote the following script and used one of the .bin files from one of the project
in iCEcube2. &lt;/p&gt;
&lt;script src="https://gist.github.com/j-marjanovic/cb271e861d279a31775d.js"&gt;&lt;/script&gt;

&lt;p&gt;This is the output (well, the real output it is the configured board which blinks the LEDs while
the DONE led is lit):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pi@raspberrypi ~/Jan/ice40/test1 $&lt;/span&gt; sudo bash conf_FPGA.sh proto1_top_bitmap.bin
&lt;span class="go"&gt;GPIO 25 not exported, trying to export...&lt;/span&gt;

&lt;span class="go"&gt;spidev does not exist&lt;/span&gt;
&lt;span class="go"&gt;SPI driver not loaded, try to load it...&lt;/span&gt;
&lt;span class="go"&gt;OK: SPI driver loaded&lt;/span&gt;

&lt;span class="go"&gt;Changing direction to out&lt;/span&gt;
&lt;span class="go"&gt;out&lt;/span&gt;
&lt;span class="go"&gt;Setting output to low&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;

&lt;span class="go"&gt;Please power cycle the iCE40 FPGA board&lt;/span&gt;
&lt;span class="go"&gt;Press any key...&lt;/span&gt;

&lt;span class="go"&gt;Continuing with configuration procedure&lt;/span&gt;
&lt;span class="go"&gt;63+1 records in&lt;/span&gt;
&lt;span class="go"&gt;63+1 records out&lt;/span&gt;
&lt;span class="go"&gt;32300 bytes (32 kB) copied, 0.606931 s, 53.2 kB/s&lt;/span&gt;
&lt;span class="go"&gt;Setting output to high&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I find this type of configuration very useful when the FPGA is not the main
chip in the system (when there is as in the previous example an RPi). The 
configuration file can be stored on Raspberry Pi SD card and at each start-up
the FPGA gets programmed. The image update can be done very easily and there 
is no way a user can brick the FPGA (which can easily happen if the FPGA writes
the configuration image and boots from its Flash, in this case two images 
(factory and user) are recommended).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 18 Jan 2015 22:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2015-01-18:www.j-marjanovic.io/lattice-ice40-configuration-using-raspberry-pi.html</guid><category>Lattice</category><category>iCE40</category><category>FPGA</category><category>Raspberry Pi</category><category>bash</category></item><item><title>My first encounter with Lattice Semiconductor</title><link>www.j-marjanovic.io/my-first-encounter-with-lattice-semiconductor.html</link><description>&lt;p&gt;The FPGA market is one of those classical markets where there are two players 
who have nearly 100% market share, e.g. PC processors (Intel and AMD), graphic
cards (NVIDIA and ATI), ... The two mayor players on the FPGA market are Xilinx
and Altera. Both of this two companies follows their rival very closely.
When one company announces the next big thing, support for new technology or
improvement to their current products, the other will shortly follow with
similar announcement.&lt;/p&gt;
&lt;p&gt;This tempo of development has brought the two main programs of these two rivals
at very high level. There is a tool (Altera Qsys and Xilinx Vivado) which lets 
you build a system from standardized building blocks with standardized 
interfaces (Altera Avalon and ARM AXI). They both offer a large palette of IP
ready to be used with their program. The debugging of the designs is simplified
with good integration with simulators (Altera by default uses Mentor Graphic 
ModelSim, Xilinx has its own XSim, but it can also use ModelSim) and integrated 
logic analysers (Altera SignalTap and Xilinx ILA) are a great help when 
simulation works but real world FPGA does not.&lt;/p&gt;
&lt;p&gt;I have an idea for my next hobby project which needs an FPGA (actually, CPLD will
do just fine) for translating one communication protocol to another. The board
will be an expansion board for Raspberry Pi, so the cost should be really low 
(I have in mind something bellow 5$). Altera and Xilinx do not offer anything in
this price range, so I recalled Lattice ads. The iCE40 series are small FPGAs
with few K logic cells and low prices. Another advantage for my project is 
possibility to configure it by SPI, something that most CPLDs does not support.&lt;/p&gt;
&lt;p&gt;So I ordered &lt;a href="http://www.latticesemi.com/iceblink40-hx1k"&gt;iCEblink40HX1K Evaluation Kit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First I tried installing the iCEcube2 software on Centos 7 which is my usual
working environment. The installation went smoothly. The problem started to occur 
when the licence manager was unable to find network adapter MAC address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;License&lt;/span&gt; &lt;span class="s s-Atom"&gt;checkout&lt;/span&gt; &lt;span class="s s-Atom"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;


&lt;span class="nv"&gt;Invalid&lt;/span&gt; &lt;span class="s s-Atom"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="s s-Atom"&gt;hostid&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="s s-Atom"&gt;this&lt;/span&gt; &lt;span class="s s-Atom"&gt;system&lt;/span&gt; &lt;span class="s s-Atom"&gt;does&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s s-Atom"&gt;match&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;hostid&lt;/span&gt;
 &lt;span class="s s-Atom"&gt;specified&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;license&lt;/span&gt; &lt;span class="s s-Atom"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;Feature&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;       &lt;span class="nv"&gt;LSC_ICECUBE2_A&lt;/span&gt;
&lt;span class="nv"&gt;Hostid&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;        &lt;span class="s s-Atom"&gt;xxxxxxxxxxxx&lt;/span&gt;
&lt;span class="nv"&gt;License&lt;/span&gt; &lt;span class="nn"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;lscc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;license&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nv"&gt;FLEXnet&lt;/span&gt; &lt;span class="nv"&gt;Licensing&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;57.&lt;/span&gt;  &lt;span class="nv"&gt;System&lt;/span&gt; &lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(null)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;For&lt;/span&gt; &lt;span class="s s-Atom"&gt;further&lt;/span&gt; &lt;span class="s s-Atom"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;refer&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;FLEXnet&lt;/span&gt; &lt;span class="nv"&gt;Licensing&lt;/span&gt; &lt;span class="nv"&gt;End&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt; &lt;span class="nv"&gt;Guide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s s-Atom"&gt;available&lt;/span&gt; &lt;span class="s s-Atom"&gt;at&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;www.macrovision.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem is that the FLEXnet software searches for the MAC address of the eth*
interface, while Centos uses completely different naming. Being familiar with the
problem, I used a trick to create a new interface named eth0 (you should replace
the x's with desired MAC address):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;modprobe dummy
ip link set name eth0 dev dummy0
ifconfig eth0 hw ether xx:xx:xx:xx:xx:xx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After setting everything up, a view on the iCEcube2 showed before me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="iCEcube2" src="www.j-marjanovic.io/images/icestudio.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is a little Spartan but it has all basic functions the FPGA developer needs. The
text editor lacks code coloring, auto-complete but there is a chance to use a 3rd
party text editor. The text in the output window is light violet on white background
and it should be changed to something more visible.&lt;/p&gt;
&lt;p&gt;The iCE family of FPGAs lacks JTAG port. Instead, user programs SPI Flash memory
through an USB to SPI converter and then the FPGA boots from SPI memory. That means
that debugging is done or by using 4 LEDs on the side or with oscilloscope, not a 
very user friendly approach.&lt;/p&gt;
&lt;p&gt;Under Linux, there is additional problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Note&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Integrated&lt;/span&gt; &lt;span class="n"&gt;Aldec&lt;/span&gt; &lt;span class="n"&gt;Active&lt;/span&gt; &lt;span class="n"&gt;HDL&lt;/span&gt; &lt;span class="n"&gt;simulation&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;iCEcube2&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt; 
&lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well this is it for now, i need to switch to Windows. Merry Christmas to everybody!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;All trademarks and registered trademarks are the property of their respective owners.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Wed, 24 Dec 2014 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2014-12-24:www.j-marjanovic.io/my-first-encounter-with-lattice-semiconductor.html</guid><category>Lattice</category><category>iCE40</category><category>FPGA</category></item><item><title>Theremin First Demo</title><link>www.j-marjanovic.io/theremin-first-demo.html</link><description>&lt;p&gt;During the weekend I was able to take some time to do first test of the theremin.
Here are two recordings of my friend Luka playing.&lt;/p&gt;
&lt;iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/177559922&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/177561150&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;&lt;/iframe&gt;

&lt;p&gt;There are some more articles explaining how digital theremin works coming,
 remember to check out my blog.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Tue, 18 Nov 2014 23:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2014-11-18:www.j-marjanovic.io/theremin-first-demo.html</guid><category>Theremin</category></item><item><title>I just got a Nintendo 64</title><link>www.j-marjanovic.io/i-just-got-a-nintendo-64.html</link><description>&lt;p&gt;I just got a Nintendo 64, my friend Rok was kind enough to lend it.&lt;/p&gt;
&lt;p style="width:700px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Nintendo 64" src="www.j-marjanovic.io/images/N64.png" /&gt;&lt;/p&gt;
&lt;p&gt;I have an interesting project in mind, I will keep you updated.
Rok will for sure be the first one to get the alpha version.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 16 Nov 2014 18:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2014-11-16:www.j-marjanovic.io/i-just-got-a-nintendo-64.html</guid><category>Nintendo 64</category></item><item><title>Theremin Antenna Measurements</title><link>www.j-marjanovic.io/theremin-antenna-measurements.html</link><description>&lt;p&gt;Last week I briefly explained how theremin works. I also presented my idea to develop a 
digital version, using FPGA as a detector of distance between hand and antenna.&lt;/p&gt;
&lt;p&gt;You have probably already heard a joke about theory and practice. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Theory is when you know everything but nothing works. Practice is when everything works
 but no one knows why. Here we combine the two, nothing works and no one knows why.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jokes aside, today we will try to measure the time constant of the antenna. In this 
implementation of theremin the measured time constant will be a control for tone pitch. 
Having a good measurement of time constant is therefore very important. A good instrument 
will produce stable tone when hand is hold still. Also, the quality of measurement of 
time constant determines a difference between two consecutive tones and fine control 
of the pitch is also desired.&lt;/p&gt;
&lt;p&gt;Here you can see this highly advanced test - a ruler strapped to the antenna.
This will allow us to measure the relationship between time constant and distance of
the hand. &lt;/p&gt;
&lt;p style="width:441px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Test setup" src="www.j-marjanovic.io/images/theremin_antena_meas.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Since the ruler is made out of plastic (we should say dielectric, when studying electric
fields) it won't affect the antenna field.&lt;/p&gt;
&lt;p&gt;The FPGA is producing a square wave signal at 10kHz, which is then sent to antenna through
a 2.2 MOhm resistor. The resistor is on the other side connected to antenna, thus creating an
RC circuit. The voltage on antenna is feed back to FPGA through a Schmitt Trigger to improve
the measured value. The module in FPGA measures how much time did it take for voltage on
antenna to reach certain value (determined by Schmitt Trigger). This time is directly 
correlated to time constant and therefore to capacitance of the antenna.&lt;/p&gt;
&lt;p&gt;Here we see what the FPGA measured when I placed hand on different distance from antenna.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Time constant without filtering" src="www.j-marjanovic.io/images/theremin_antenna_direct.png" /&gt;&lt;/p&gt;
&lt;p&gt;The blue dots denote mean value, the green lines denote one standard deviation and the
black lines denote minimum and maximum value.&lt;/p&gt;
&lt;p&gt;Right now, the measurements do not look very promising, we can see some increase of time
constant as hand approaches antenna, but the noise is extremely high.&lt;/p&gt;
&lt;p&gt;If we have a look at the frequency spectrum of the measurement, we see the reason for the
noise.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Time constant spectral analysis" src="www.j-marjanovic.io/images/theremin_antenna_direct_fft.png" /&gt;&lt;/p&gt;
&lt;p&gt;The antenna is 45 cm long copper rod and acts not only as a capacitor for theremin but also
as radio antenna. All the frequency components above Nyquist frequency (which is 5000 kHz
in our case) are being aliased to lower frequencies in our frequency range. A 50Hz signal
from mains is also being picked up.&lt;/p&gt;
&lt;p&gt;We need a filter! A filter will reject all the undesired frequencies and that will greatly
improve.&lt;/p&gt;
&lt;p&gt;I will write another article on filtering in FPGA, meanwhile let's enjoy much improved 
results:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Time constant with filtering" src="www.j-marjanovic.io/images/theremin_antenna_filtered.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 09 Nov 2014 09:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2014-11-09:www.j-marjanovic.io/theremin-antenna-measurements.html</guid><category>Theremin</category></item><item><title>Theremin Basics</title><link>www.j-marjanovic.io/theremin-basics.html</link><description>&lt;p&gt;Theremin, a first electronic instrument. Leon Theremin invented it in 1928. 
Try to imagine people seeing somebody waving hand in the middle or the air
and producing an extraterrestrial sounds. Theremin, should be considered a 
true pioneer of electronic music.&lt;/p&gt;
&lt;p&gt;The operational principle is quite simple, however an good implementation is
not so trivial. I recall playing on it in Deutsches Museum in Munich and that
particular model had a sphere as an antenna. The tone frequency is dependant
on antenna capacitance. To achive maximum control, the relationship between
capacitance and distance between hand and antenna should be linear. However,
the model in Munich had reciprocal relationship and that made hitting right 
notes quite hard.&lt;/p&gt;
&lt;p&gt;I am going to make a new version of theremin, a reinterpretation for 21st
century. I will still use antenna to control the pitch, but the "back-end"
will be completely different. &lt;/p&gt;
&lt;p&gt;The antenna acts as one plate of the capacitor and the hand is the other.
I did a quick simulation in Python to be able to show some numbers. This is
meant to be a demonstration of operating principle, so it lacks few
not-so-minor details. The calculations were done in 2D, where antenna in 
real world exist in 3 dimensions. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Theremin simulation" src="www.j-marjanovic.io/images/theremin_antenna.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/drafts/theremin-simulation.html"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we know that antenna acts as a capacitor, so next challenge is to
produce a tone with the pitch related to capacitance. The original Theremin
uses antenna as a capacitor of the LC resonator. Here is the first big
difference between my implementation and original one, I will be measuring
time constant of the RC circuit with an FPGA. &lt;/p&gt;
&lt;p&gt;The FPGA will generate a square wave and feed it to antenna through a
resistance. This will create a current which will charge capacitor (antenna).
The other circuit (module) in FPGA will measure time needed for voltage on 
capacitor to reach certain level. A bigger capacitance (smaller distance 
between hand and antenna)  will result in longer time and a smaller
capacitance (longer distance between hand and antenna) will result in shorter
time. This difference will generate a different pitch.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Theremin settling time" src="www.j-marjanovic.io/images/theremin_settling_time.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is all for this part, stay tuned for more.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Thu, 06 Nov 2014 22:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2014-11-06:www.j-marjanovic.io/theremin-basics.html</guid><category>Theremin</category></item><item><title>Hello world</title><link>www.j-marjanovic.io/hello-world.html</link><description>&lt;p&gt;Hi and welcome to my blog.&lt;/p&gt;
&lt;p&gt;This is a "hello world" style post, I am curently testing pelican static blog generator.
Since I don't know how much time I will have to manage this blog I prefer that everything 
is static. If I some day stop writing this blog, at least there won't be any security threats
due to out-of-date web page.&lt;/p&gt;
&lt;p&gt;This blog will be about one of my biggest passions, electronics and technology in general.
Since I was a kid I was curious about electronic devices and to this day I always enjoy
taking thing appart (and sometimes also together, that is what I am being paid for). &lt;/p&gt;
&lt;p&gt;This is all for now, let's see if it "compiles"...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Marjanovic</dc:creator><pubDate>Sun, 02 Nov 2014 13:00:00 +0100</pubDate><guid isPermaLink="false">tag:,2014-11-02:www.j-marjanovic.io/hello-world.html</guid></item></channel></rss>