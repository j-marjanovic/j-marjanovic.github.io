<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>j-marjanovic.io - misc</title><link href="www.j-marjanovic.io/" rel="alternate"></link><link href="www.j-marjanovic.io/feeds/misc.atom.xml" rel="self"></link><id>www.j-marjanovic.io/</id><updated>2021-06-26T04:00:00+02:00</updated><entry><title>Notes from Chisel Community Conference China 2021</title><link href="www.j-marjanovic.io/notes-from-chisel-community-conference-china-2021.html" rel="alternate"></link><published>2021-06-26T04:00:00+02:00</published><updated>2021-06-26T04:00:00+02:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2021-06-26:www.j-marjanovic.io/notes-from-chisel-community-conference-china-2021.html</id><summary type="html">&lt;p&gt;Here are my notes from the Chisel Community Conference China 2021. The
conference took place on June 26th 2021, and was organized as a hybrid
conference, open to both on-site and remote participants (over Zoom). The
organizers have promised that the recorded talks will be made available online
in the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are my notes from the Chisel Community Conference China 2021. The
conference took place on June 26th 2021, and was organized as a hybrid
conference, open to both on-site and remote participants (over Zoom). The
organizers have promised that the recorded talks will be made available online
in the next couple of weeks.&lt;/p&gt;
&lt;p&gt;Since the conference was located in China it started in the early morning hours
for the participants from Europe. I decided that 4:00 is a good compromise
between my love for Chisel and my need for sleep; I have only missed the two
invited talks at the beginning. In general the conference was quite interesting,
and it was clear that Chisel is particularly suited for highly configurable
designs, e.g. processors and data-processing pipelines.&lt;/p&gt;
&lt;p&gt;Written in &lt;em&gt;italics&lt;/em&gt; are my comments.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;[Invited Talk] Chisel breakdown 2&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;...&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;cloneType&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;override def cloneType&lt;/code&gt; --&amp;gt; autoclonetype2&lt;/li&gt;
&lt;li&gt;&lt;em&gt;why have I never needed this?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoclonetype1&lt;/code&gt; - deprecated, was based on reflection&lt;/li&gt;
&lt;li&gt;generated by the compiler plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;aspect phase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;insert additional hardware, layout, verification, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Top 10 Common Misconception about Chisel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Institute of Computing Technology at CAS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in Chinese, I understood "Chisel", "DSL", and "okay"&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;RocketChip&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RocketChip is complicated, several additional ... (config, the bus framework, register gen)&lt;/li&gt;
&lt;li&gt;"if you are new to Chisel, DO NOT read the source code of RocketChip"&lt;/li&gt;
&lt;li&gt;&lt;em&gt;note to self: go read the source code of RocketChip&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Verilog is more expressive than Chisel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the presenter argues that logic is fundamentally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modules&lt;/li&gt;
&lt;li&gt;combinatorial logic&lt;/li&gt;
&lt;li&gt;registers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;technically this is all supported in Chisel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;I am not sure if I would agree - I think there is still place for Verilog for low-level stuff, just like some parts of the code (e.g. in Linux kernel) are still written in assembly&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Chisel compile errors&lt;/h2&gt;
&lt;p&gt;types of errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scala compile errors&lt;/li&gt;
&lt;li&gt;Scala run-time error&lt;/li&gt;
&lt;li&gt;Chisel build error&lt;/li&gt;
&lt;li&gt;FIRRTL transform error&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Circuit simulation error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distinction between fault (uninit variable), error (returning  a garbage value) and failure (segmentation fault)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;how are these different?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the presenter argues that Chisel has a stricter type system than Verilog&lt;/li&gt;
&lt;li&gt;shouldn't Chisel be compared to SystemVerilog for a fair comparison? (also &lt;code&gt;default_nettype none&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;"hidden fault" -&amp;gt; "observable failure"&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;Blackbox&lt;/code&gt; for (System)Verilog&lt;/h2&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chisel Tester, Chisel Tester 2, UVM from Verilog&lt;/li&gt;
&lt;li&gt;"Agent Faker": TL-C UVM above Chisel Tester 2, open source&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;equality between Chisel and generated Verilog code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;aka "the Chisel compiler is not formally verified"&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;very complex task and unnecessary, one can run tests also on the generated Verilog&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;known-good&lt;/em&gt; --&amp;gt; successful Chisel projects: RocketChip, BOOM, lowRISC, NutShell, Labeled RISC-V, XiangShan&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Quality of Results for Chisel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;misconception: Java slower than C --&amp;gt; Chisel hardware slower than Verilog hardware&lt;/li&gt;
&lt;li&gt;&lt;em&gt;OK, I experienced this first hand - my colleague was asking me what the fmax is for a typical Chisel-generated logic&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;will he also mention that Chisel is not an HLS?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Chisel is not HLS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;I predict the future&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;advanced features in Chisel/Scala (&lt;em&gt;i managed to understand "map", "mapper"&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PPA: Power-Performance-Area&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;generated core readability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;comments in verilog&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmbeddedTLB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;wasn't there a patch to improve readbility of the generated code - check previous CCC&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;high-performance circuits in Chisel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OpenXiangShan/XiangShan"&gt;https://github.com/OpenXiangShan/XiangShan&lt;/a&gt;, &lt;a href="https://openxiangshan.github.io/"&gt;https://openxiangshan.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;looks impressive&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Introducing Decoder Generation API to Chisel&lt;/h1&gt;
&lt;h2&gt;example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;7 segment LED&lt;/li&gt;
&lt;li&gt;input: b0 - b4, output: a - g, k for cathode&lt;/li&gt;
&lt;li&gt;non-valid states = (default, don't care)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;theory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AND plane, OR plane  (&lt;em&gt;this looks like PAL/GAL, right?&lt;/em&gt;, &lt;em&gt;is this really relevant for modern LUT-based FPGAs and ASICs?&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;now a full example of the 7-segment decoder implemented in PLA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logic optimization (definition from Wikipedia)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quine-McClusky&lt;/li&gt;
&lt;li&gt;Espresso&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sparser PLA&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Chisel utils&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;experimental.decode.TruthTable&lt;/code&gt;, &lt;code&gt;DecodeTableAnnotation&lt;/code&gt;, &lt;code&gt;decoder&lt;/code&gt;,
  &lt;code&gt;QMCMinimizer&lt;/code&gt;, &lt;code&gt;EspressoMinimizer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;how does this affect later stages (e.g. optimization during the synthesis)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nice Scala feature - "list unpacking" - &lt;code&gt;val a :: b :: [...] = x.toBools()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Practice of High-performance Chip Agile Development with Chisel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XiangShan CPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;agile development (iterative)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;SystemVerilog &lt;code&gt;interface&lt;/code&gt;s, Chisel &lt;code&gt;Bundle&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;processor parameters&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ultra - apparently the highest-end impl of the processor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chisel solution - &lt;code&gt;Vec&lt;/code&gt; in a &lt;code&gt;Bundle&lt;/code&gt; as an I/O&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FIRRTL transform for &lt;code&gt;printf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;configurability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;"Chisel = syntactic sugar for Verilog"&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link: wallace tree multiplier, CCCC 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recursion is allowed in Chisel, the generated Verilog code does not include recursion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/OpenXiangShan/XiangShan/pull/812"&gt;https://github.com/OpenXiangShan/XiangShan/pull/812&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distinction between Chisel, Scala&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Wire, Reg - straightforward to understand&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;advanced Scala features: object, abstract class, trait&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;advice: start with Chisel, learn Scala later, &lt;em&gt;i would not agree, learn Scala first&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;co-simulation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scala-based modules in Chisel Test2 cannot be used in other tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;behavioral models to replace actual Chisel modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;assertion generation in Chisel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generated names can change between Chisel versions, and can cause problems for physical design&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;chisel is an advanced HDL, not HLS&lt;/li&gt;
&lt;li&gt;parametrization&lt;/li&gt;
&lt;li&gt;does not affect PPA (vs Verilog)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Revisiting Diplomacy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;not an HLS, HCL = HW Construction Language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RocketChip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an example of a configuration with Verilog: &lt;a href="https://github.com/riscv-mcu/e203_hbirdv2/blob/master/rtl/e203/core/config.v"&gt;https://github.com/riscv-mcu/e203_hbirdv2/blob/master/rtl/e203/core/config.v&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Verilog defines = "that is a piece of garbage" :D&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;defines&lt;/code&gt; are handled by a preprocessor&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no easy way to provide a validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;diplomacy: parameter negotiation framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;CDE (Content Dependent Values)&lt;/li&gt;
&lt;li&gt;Scala &lt;code&gt;implicit&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Scala type inference and type checking&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;user API (&lt;code&gt;extend Config&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;design API (&lt;code&gt;trait&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;parameters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hierarchy&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;topology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;global defintion = bad&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Parameter&lt;/code&gt;, &lt;code&gt;LazyModule&lt;/code&gt;, passed implicitly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;topology parameters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;interfaces as DAG (Directed Acyclic Graph)&lt;/li&gt;
&lt;li&gt;acylic: how does DMA look like?&lt;/li&gt;
&lt;li&gt;interfaces: AXI, TileLink, ...&lt;/li&gt;
&lt;li&gt;2-phase elaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Diplomacy refactor -&amp;gt; stand-alone library&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(plans for) TileLink, AXI, ACE, CHI, WishBone&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RocketChip newbies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;TileLink implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Using partial swarm optimization to reduce verification time&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;prerecorded intro, &lt;em&gt;issues with audio&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partial Swarm Optimization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v_i - particle velocity&lt;/li&gt;
&lt;li&gt;C - learning factor&lt;/li&gt;
&lt;li&gt;global best&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CDMA - some kind of a DMA, apparently &lt;br/&gt;
MCIF - presumably memory controller interface&lt;/p&gt;
&lt;p&gt;1 channel with weights &lt;br/&gt;
3 data channels: IMG, WG, DC&lt;/p&gt;
&lt;p&gt;data word: 78*3 bits&lt;/p&gt;
&lt;p&gt;process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;generate random solution&lt;/li&gt;
&lt;li&gt;calculate the fitness&lt;/li&gt;
&lt;li&gt;update the particle speed and position&lt;/li&gt;
&lt;li&gt;end a high-quality stimulus was found, else goto 1&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1&gt;A general method of generating stimulus based on SVM&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;verification consumes a lot of resources&lt;/li&gt;
&lt;li&gt;using SVM to &lt;strong&gt;predict&lt;/strong&gt; coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SVM - support vector machine (binary classification)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using Matlab -&amp;gt; different types, different functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convolution Pipeline:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;CDMA, CBUF, CSC, CMAC, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSC - convolution sequence controller = gets the data from DMA, loads/schedules it into MAC&lt;/p&gt;
&lt;p&gt;nvdla-csc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SG - sequence generator&lt;/li&gt;
&lt;li&gt;DL - data loader&lt;/li&gt;
&lt;li&gt;WL - weight loader&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;training&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;data, labels = coverage data&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;process:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;training&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;random stimuli&lt;/li&gt;
&lt;li&gt;get the coverage from VCS&lt;/li&gt;
&lt;li&gt;use this to create training set for SVM&lt;/li&gt;
&lt;li&gt;train SVM&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;an arbitrary value is chosen as a threshold between the labels&lt;/p&gt;
&lt;p&gt;&lt;em&gt;couldn't this be done better with Reinforcement Learning? and is the SVM the right tool to use?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Q: relationship between the project and Chisel? &lt;br/&gt;
A: &lt;em&gt;answer in Chinese&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Summary of Problems and Experiences during the Processor Development based on Chisel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;short intro (chisel sheatsheet, Programming in Scala, software thinking, hardware thinking)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;val&lt;/code&gt; vs &lt;code&gt;def&lt;/code&gt; (&lt;em&gt;this could be nasty to debug, &lt;code&gt;def&lt;/code&gt; creates a new instance on each call&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cat&lt;/code&gt; vs &lt;code&gt;Map&lt;/code&gt;, hardware thinking vs software thinking --&amp;gt; Cat starts at MSB, Map starts at LSB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;width - in &lt;code&gt;Cat&lt;/code&gt; it should be explicitly defined&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;careful with &lt;code&gt;DontCare&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Syntactic Salt - I like this very much&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;competitive assignment (loop index)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;developer perspective&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;"Chisel = excelent HDL, free devs from dirty work"&lt;/li&gt;
&lt;li&gt;"be familiar with Scala before using Chisel"&lt;/li&gt;
&lt;li&gt;check the generated verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;I liked this talk, the examples were relevant&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Q: a question about the competitive assignment (in Chinese)&lt;/p&gt;
&lt;p&gt;Q: &lt;em&gt;i understood TPU, SiFive and xie xie&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Stimuli Generation by Constrained Markov Chain Monte Carlo Simulation for Chisel-based Deep Learning Accelerator Verification Platform&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;was this title also generated with a Markov Chain?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;nvdla.org&lt;/p&gt;
&lt;h2&gt;Direction Convolution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;input: CSC, output CACC&lt;/li&gt;
&lt;li&gt;each MAC cell: 64 multipliers&lt;/li&gt;
&lt;li&gt;pipelined status&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Constrained Random Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Markov-Chain Monte-Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;Monte-Carlo: draw independent samples from the distribution&lt;/li&gt;
&lt;li&gt;Markov-Chain: the current value is probabilistically dependent on the previous value&lt;/li&gt;
&lt;li&gt;Metropolis-Hastings Algorithm (proposal, an acceptance of the proposal)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;implementation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use a pool of states to generate a low-correlation stimulus&lt;/li&gt;
&lt;li&gt;MCMC-based fault location&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;very precise and academic presentation, unclear how it relates to Chisel and
how this method can be used in practice&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Implementation of a Highly Configurable Wallace Tree Multiplier with Chisel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;recursion for Wallace tree compression&lt;/li&gt;
&lt;li&gt;only 120 lines of Chisel code&lt;/li&gt;
&lt;li&gt;configurable pipelining&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;the algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;booth-4 encoding&lt;/li&gt;
&lt;li&gt;n*n mul &amp;lt;-&amp;gt; n/2 partial products&lt;/li&gt;
&lt;li&gt;sign-extend (&lt;code&gt;i match [...]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;tree-compression - columns represented as &lt;code&gt;Array[Seq[Bool]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;code&gt;Seq&lt;/code&gt; vs &lt;code&gt;Array&lt;/code&gt;?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;what is the benefit of using &lt;code&gt;Array&lt;/code&gt; (from Java) vs &lt;code&gt;Vec&lt;/code&gt; (from Chisel)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compress the whole tree (+ register insertion)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;summary: highly configurable, better scalability, easier to read&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: something about latency on the slide about pipelining&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Agile IC Design Team Working in Chisel, Empowered by Diplomacy and Config&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.streamcomputing.com/en/"&gt;https://www.streamcomputing.com/en/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RocketChip/BOOM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qs when reading the code: &lt;code&gt;implicit&lt;/code&gt;, &lt;code&gt;:*=&lt;/code&gt; and &lt;code&gt;:=*&lt;/code&gt;, ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Diplomacy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scala framework&lt;/li&gt;
&lt;li&gt;negotation/castint/modifying parameters&lt;/li&gt;
&lt;li&gt;LazymoduleImp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Config&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scala framework&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;definition of parameters globaly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chisel =/= Diplomacy and Config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Diplomacy and Config = pure Scala&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;suitable for SoCs&lt;/li&gt;
&lt;li&gt;availability of open-source IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hard to fully understand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;building a Chisel Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;firm commitment to Chisel&lt;/li&gt;
&lt;li&gt;no modifications of the generated Verilog&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;divide an conquer: dedicated experts for Diplomacy and Config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chisel basis (Bundle, Reg, WIre,, ...)&lt;/li&gt;
&lt;li&gt;Diplomacy and Config (case class, high-order function, other advanced features)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minor tricks: wrap important signals in modules, use CamelCase in Chisel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Experience Sharing: Develop NutShell using Chisel&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/OSCPU/NutShell"&gt;https://github.com/OSCPU/NutShell&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NutShell (5 undergraduates in 4 months)&lt;/li&gt;
&lt;li&gt;SDRAM, SPI and UART,&lt;/li&gt;
&lt;li&gt;boots Linux (Debian/Fedora)&lt;/li&gt;
&lt;li&gt;single-issue, in-order core&lt;/li&gt;
&lt;li&gt;RV64IMAC, Zifence, Zicsr&lt;/li&gt;
&lt;li&gt;runs at 60 MHz on Zynq 7000, 200 MHz on Zynq US+, 350 MHz in 110 nm SMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;example:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MaskedRegMap&lt;/code&gt; abstract class - address, read and write side effects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt; method, &lt;code&gt;generate&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;peripheral devices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MMIO - AXI4 or AXI4Lite&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AXI4SlaveModule&lt;/code&gt; abstract class&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;suggestion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;avoid Verilog-like Chisel&lt;/li&gt;
&lt;li&gt;software-like Chisel - careful with &lt;code&gt;var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;find the balance&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Chisel Implementation Tutorial - in a lightweight ...&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;the title in the program was "Light Weight Chisel3 KnitKit"&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data -&amp;gt; Bits -&amp;gt; Clock/Wire/... (&lt;em&gt;outdated diagram&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RegInit&lt;/code&gt; with different types of resets&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;running through slides&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;io connection with &lt;code&gt;withClockAndReset&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/colin4124/Chisel-Implementation-Tutorial"&gt;https://github.com/colin4124/Chisel-Implementation-Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;created 6 hours ago&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Q: something about &lt;code&gt;AutoBundle&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Use Firrtl Transform to Control the Effective Range of 'printf' in Large Scale Circuits&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt; in Chisel can be translated in &lt;code&gt;fwrite&lt;/code&gt; in Verilog&lt;/li&gt;
&lt;li&gt;extensive printing will slow down the simulation&lt;/li&gt;
&lt;li&gt;typically only as small part of the code is inspected&lt;/li&gt;
&lt;li&gt;using FIRRTL transform&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;4 types of annotation:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EnablePrintfAnnotation&lt;/code&gt;, &lt;code&gt;Disable..&lt;/code&gt;, &lt;code&gt;DisableAll..&lt;/code&gt;, &lt;code&gt;Remove Assert...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execute(c: CircuitState)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ancestor (hierarchy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;firrtl.analyses.CircuitGraph&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Reinforcement Learning based Stimulus Generation for Chisel Module Verification&lt;/h1&gt;
&lt;h2&gt;Constrained Random Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;test generator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CACC: convolution accumulator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;assembly SRAM group, delivery SRAM group (banks of 64Bx32 SRAMs)&lt;/li&gt;
&lt;li&gt;assembly = accumulation with saturation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reinforcement Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Agent&lt;/li&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Environment&lt;/li&gt;
&lt;li&gt;Reward&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q-learning (Q = quality), Bellman equation,&lt;/p&gt;
&lt;p&gt;states = coverage, actions = stimulus
gamma = reward discount&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;agent is exploring the environment, Q-table is updated, Q is maximized&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;approach&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;extremely large input vector: 2 ** 131&lt;/li&gt;
&lt;li&gt;multiplexer: stimulus = 128 digits, select = 3 bits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;controller written in Python! (at a Chisel workshop)&lt;/em&gt; :)&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Genetic Algorithm based Stimulus Generation for Chisel Module Verification&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Single Point Data Processor = post-processor of NVDLA&lt;/li&gt;
&lt;li&gt;inputs: i32 x 16 from CACC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Genetic Algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;population&lt;/li&gt;
&lt;li&gt;fitness calculation&lt;/li&gt;
&lt;li&gt;mating pool&lt;/li&gt;
&lt;li&gt;parents selection&lt;/li&gt;
&lt;li&gt;mating (crossover and mutation)&lt;/li&gt;
&lt;li&gt;offsprings&lt;/li&gt;
&lt;li&gt;back to population&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;approach&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;20 binary stimulus vectors&lt;/li&gt;
&lt;li&gt;fitness calculation - coverage from VCS&lt;/li&gt;
&lt;li&gt;matting: exchange bits in vectors between stimuli vectors, mutation: bit flips&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;again no mention of Chisel, no result presented&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Recurring Neural Networks based Stimuli Generation for Chisel Module Verification&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;constrained random verification (PRG for randomization, constraints for stimuli)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Recurring Neural Network&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;neuron: x * w - offset + threshold&lt;/li&gt;
&lt;li&gt;Hopfield Network (each neurons output is connected to all other neurons but not to itself)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;PDP (Planar Data Processing)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;results of the pooling process&lt;/li&gt;
&lt;li&gt;outputs: max, min, average&lt;/li&gt;
&lt;li&gt;traverses width, height, channel&lt;/li&gt;
&lt;li&gt;maximum pooling (pipelined)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;approach&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;inputs: control, status from the previous module, data payload&lt;/li&gt;
&lt;li&gt;output: status, and data&lt;/li&gt;
&lt;li&gt;Python based controller, simulation with VCS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Quasar: SweRV-EL2 implemented in CHISEL&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Convert SweRV-EL2 from SystemVerilog to Chisel&lt;/li&gt;
&lt;li&gt;comparison of SystemVerilog to Chisel&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Quasar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4-stage, mostly in-order, RV32IMC, runs at 600 MHz at 16 nm&lt;/li&gt;
&lt;li&gt;development procedure: first unit test, then  comparison between SweRV-EL2&lt;/li&gt;
&lt;li&gt;LEC (*is this a formal) on the generated Verilog&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pros/Cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;parametreizable &amp;amp; scalable code&lt;/li&gt;
&lt;li&gt;no linting problems&lt;/li&gt;
&lt;li&gt;people are reluctant about adopting Chisel&lt;/li&gt;
&lt;li&gt;"Chisel makes the verification more tedious"&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Analysis of the results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;fMAX, area and power almost the same (2-3% difference)&lt;/li&gt;
&lt;li&gt;Chisel: 12 kLOC, SystemVerilog: 19 kLOC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;F-extension (will be open-sourced in the near future)&lt;/li&gt;
&lt;li&gt;vector extension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/Lampro-Mellon/Chisel-Training"&gt;https://github.com/Lampro-Mellon/Chisel-Training&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;ChiselVerify: A Verification Framework for Chisel&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;verification = testing before tape-out&lt;/li&gt;
&lt;li&gt;validation = testing after tape-out&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Current solutions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ChiselTest (not many functions), ScalaTest&lt;/li&gt;
&lt;li&gt;SystemVerilog, UVM (verbose, multiple languages)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ChiselVerify&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;an extension to ChiselTest&lt;/li&gt;
&lt;li&gt;4 parts&lt;/li&gt;
&lt;li&gt;functional coverage&lt;/li&gt;
&lt;li&gt;constraint random verification&lt;/li&gt;
&lt;li&gt;bus functional model&lt;/li&gt;
&lt;li&gt;timed assertions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;functional coverage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;statement coverage / functional coverage&lt;/li&gt;
&lt;li&gt;verification plan &amp;lt;- cover groups &amp;lt;- cover points] (Range, Conditions, Cross, Timed)&lt;/li&gt;
&lt;li&gt;coverage database&lt;/li&gt;
&lt;li&gt;coverage reporter&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CoverageReporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nc"&gt;CoverPoints&lt;/span&gt;&lt;span class="p"&gt;(...),&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printReport&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;constraint random verification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;constraint programmable language&lt;/li&gt;
&lt;li&gt;JaCoP as an SMT solver&lt;/li&gt;
&lt;li&gt;custom distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bus functional models&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AXI4 interface&lt;/li&gt;
&lt;li&gt;Transactions&lt;/li&gt;
&lt;li&gt;software abstraction&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;timed assertions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;types of delays:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exactly&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Eventually&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Always&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Never&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;"test Chisel designs in Scala"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/chiselverify/chiselverify"&gt;https://github.com/chiselverify/chiselverify&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Teaching Digital Design with Chisel&lt;/h2&gt;
&lt;p&gt;Q at CCC 2020: "Is Chisel ready for class?" &lt;br/&gt;
A: yes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two courses: Digital Electronics 1 &amp;amp; 2&lt;/li&gt;
&lt;li&gt;VHDL until 2019, DE1 still uses VHDL, DE2 uses Chisel&lt;/li&gt;
&lt;li&gt;"VHDL is dying a little bit"&lt;/li&gt;
&lt;li&gt;IntelliJ, sbt (&lt;code&gt;sbt run&lt;/code&gt;, &lt;code&gt;sbt test&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Digital Design with Chisel (&lt;a href="https://www.imm.dtu.dk/~masca/chisel-book.html"&gt;https://www.imm.dtu.dk/~masca/chisel-book.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;LOC(VHDL)/LOC(Chisel) ~ 2&lt;/li&gt;
&lt;li&gt;Simulation + GUI in Swing&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Towards Agile Networking Hardware - Chisel at OVHcloud&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;OVHcloud = 1st European cloud provider&lt;/li&gt;
&lt;li&gt;22 Tbps bandwidth, DDoS&lt;/li&gt;
&lt;li&gt;anti-DDoS (scrubbing with FPGAs)&lt;/li&gt;
&lt;li&gt;attackers are agile, to respond&lt;/li&gt;
&lt;li&gt;HLS - reduces performance and agility&lt;/li&gt;
&lt;li&gt;does HCL improve agility without affecting performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;de-risking&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;counter store (hash table with a cuckoo filter)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hal.archives-ouvertes.fr/hal-03157426"&gt;https://hal.archives-ouvertes.fr/hal-03157426&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;reset, async reset added recently&lt;/li&gt;
&lt;li&gt;with no reset the P&amp;amp;R results are better&lt;/li&gt;
&lt;li&gt;Pull Request for Preset&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;flow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;limitation: parameters are embedded in names&lt;/li&gt;
&lt;li&gt;solution: a wrapper in Verilog for the Chisel-generated Verilog&lt;/li&gt;
&lt;li&gt;successful SV/Chisel cohabitation&lt;/li&gt;
&lt;li&gt;sv2chisel ("low level Chisel"), challenges: clock and reset retrieval, choosing types&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ovh/sv2chisel"&gt;https://github.com/ovh/sv2chisel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CocoTB instead of Chisel-testers&lt;/li&gt;
&lt;li&gt;Pipeline abstraction (PhD thesis, a DSL on top of Chisel)&lt;/li&gt;
&lt;/ul&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="misc"></category><category term="FPGA"></category><category term="Scala"></category><category term="Chisel"></category></entry><entry><title>New Ubuntu, old problems with ModelSim</title><link href="www.j-marjanovic.io/new-ubuntu-old-problems-with-modelsim.html" rel="alternate"></link><published>2019-04-20T08:40:00+02:00</published><updated>2019-04-20T08:40:00+02:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2019-04-20:www.j-marjanovic.io/new-ubuntu-old-problems-with-modelsim.html</id><summary type="html">&lt;p&gt;A couple of days ago a new release of Ubuntu, Ubuntu 19.04 Disco Dingo was
released. On my personal laptop I follow the non-LTS line, which brings
me cool features and updated programs (e.g. Python 3.7, GCC 8.3, ...)
out-of-the-box.&lt;/p&gt;
&lt;p&gt;Unfortunately, because the libraries are updated, the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A couple of days ago a new release of Ubuntu, Ubuntu 19.04 Disco Dingo was
released. On my personal laptop I follow the non-LTS line, which brings
me cool features and updated programs (e.g. Python 3.7, GCC 8.3, ...)
out-of-the-box.&lt;/p&gt;
&lt;p&gt;Unfortunately, because the libraries are updated, the update process causes
some programs to become broken. Mentor Graphics ModelSim is for example
one of the tools which required some tweaks to make it work on Ubuntu 19.04.&lt;/p&gt;
&lt;p&gt;Described here are the steps which made ModelSim to work on Ubuntu 19.04.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note: according to &lt;a href="https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/manual/quartus_install.pdf"&gt;IntelÂ® FPGA Software Installation and
Licensing&lt;/a&gt;,
ModelSim - Intel FPGA Edition officially supports RHEL 5, 6 or 7 and Windows.
Ubuntu is officially not supported.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Initial attempt&lt;/h1&gt;
&lt;p&gt;I have started with a fresh installation of ModelSim*-IntelÂ® FPGA Starter
Edition Software from Quartus 19.1 package.&lt;/p&gt;
&lt;p&gt;When running &lt;code&gt;vsim&lt;/code&gt; from &lt;code&gt;intelFPGA/19.1/modelsim_ase/bin&lt;/code&gt; I get the
following error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./vsim
Error: cannot find &lt;span class="s2"&gt;&amp;quot;./../linux_rh60/vsim&amp;quot;&lt;/span&gt;
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From the path it is clear that ModelSim thinks it is running on RHEL 6. As
described in an extensive &lt;a href="https://wiki.archlinux.org/index.php/Altera_Design_Software#ModelSim-Altera_Edition"&gt;Wiki entry on Altera
software on Arch Linux Wiki&lt;/a&gt;,
one needs to modify &lt;code&gt;vco&lt;/code&gt; file and downgrade &lt;code&gt;freetype&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;Once this is settles (by the way, this used to be enough to make ModelSim work on
Ubuntu 18.10) we get the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./vsim
Reading pref.tcl
./../linuxaloem/vish: symbol lookup error: /usr/lib/i386-linux-gnu/libfontconfig.so.1: undefined symbol: FT_Done_MM_Var
** Fatal: Read failure &lt;span class="k"&gt;in&lt;/span&gt; vlm process &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This message is new and it required me to do some investigation to get it fixed.&lt;/p&gt;
&lt;h1&gt;Downgrading fontconfig&lt;/h1&gt;
&lt;p&gt;From the error message it is clear that &lt;code&gt;libfontconfig.so&lt;/code&gt; tries to use function
called &lt;code&gt;FT_Done_MM_Var&lt;/code&gt; and is unable to find it.&lt;/p&gt;
&lt;p&gt;To investigate further I cloned &lt;code&gt;fontconfig&lt;/code&gt; source code from:
https://gitlab.freedesktop.org/fontconfig/fontconfig.git&lt;/p&gt;
&lt;p&gt;A quick &lt;code&gt;grep&lt;/code&gt; finds the following instances of the symbol in question:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ grep -rn FT_Done_MM_Var .
./README:119:      Use FT_Done_MM_Var &lt;span class="k"&gt;if&lt;/span&gt; available
./src/fcfreetype.c:2261:    FT_Done_MM_Var &lt;span class="o"&gt;(&lt;/span&gt;ftLibrary, mm_var&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
./configure.ac:321:AC_CHECK_FUNCS&lt;span class="o"&gt;(&lt;/span&gt;FT_Get_BDF_Property FT_Get_PS_Font_Info FT_Has_PS_Glyph_Names FT_Get_X11_Font_Format FT_Done_MM_Var&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One &lt;code&gt;git blame&lt;/code&gt; after we find the following commit which introduced this function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;94683&lt;/span&gt;&lt;span class="n"&gt;a1255c065a7f8e7fadee9de605f3eaf9ac7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Behdad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Esfahbod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;behdad&lt;/span&gt;&lt;span class="nv"&gt;@behdad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Mon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FT_Done_MM_Var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then we can find out that release &lt;strong&gt;2.12.92&lt;/strong&gt; is the last one which does
not contain this change.&lt;/p&gt;
&lt;p&gt;I checked out the code from release &lt;strong&gt;2.12.92&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b 2.12.92 2.12.92
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Installed the libraries needed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install libxml2-dev:i386 uuid-dev:i386
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And used the following commands to compile and install an older version
of &lt;code&gt;fontconfig&lt;/code&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;aclocal&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;m4&lt;/span&gt;
&lt;span class="n"&gt;autoconf&lt;/span&gt;
&lt;span class="n"&gt;libtoolize&lt;/span&gt;
&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;autogen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="n"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;m32&lt;/span&gt; &lt;span class="n"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;freetype&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fontconfig&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.12&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;libxml2&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Changes to vco&lt;/h1&gt;
&lt;p&gt;Finally, I needed to change &lt;code&gt;vco&lt;/code&gt; in &lt;code&gt;intelFPGA/19.1/modelsim_ase/bin&lt;/code&gt; folder
to load the freshly-recompiled libraries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;diff&lt;/span&gt; &lt;span class="s s-Atom"&gt;vco&lt;/span&gt; &lt;span class="s s-Atom"&gt;vco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;orig&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="s s-Atom"&gt;d10&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;added&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;Ubuntu&lt;/span&gt; &lt;span class="mf"&gt;19.04&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;recompiled&lt;/span&gt; &lt;span class="s s-Atom"&gt;libraries&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="s s-Atom"&gt;=/home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;freetype&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.4.7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="s s-Atom"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nn"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;jan&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;fontconfig&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.12.92&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="s s-Atom"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nn"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; 
&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="s s-Atom"&gt;c13&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;changed&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;Ubuntu&lt;/span&gt; &lt;span class="mf"&gt;19.04&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;force&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;bit&lt;/span&gt; &lt;span class="s s-Atom"&gt;mode&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;mode=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;MTI_VCO_MODE&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s s-Atom"&gt;---&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;mode=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;MTI_VCO_MODE&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;213&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;214&lt;/span&gt;&lt;span class="s s-Atom"&gt;d208&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;           &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;added&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;Ubuntu&lt;/span&gt; &lt;span class="mf"&gt;19.04&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;kernel&lt;/span&gt; &lt;span class="s s-Atom"&gt;version&lt;/span&gt; &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="s s-Atom"&gt;x&lt;/span&gt; &lt;span class="s s-Atom"&gt;then&lt;/span&gt; &lt;span class="s s-Atom"&gt;use&lt;/span&gt; &lt;span class="s s-Atom"&gt;linuxaloem&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;           &lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="s s-Atom"&gt;vco=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;linuxaloem&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Ta-da, ModelSim now works on Ubuntu 19.04. The font styles are a little bit
broken, but being humble is a good characteristic, and we won't ask too much.&lt;/p&gt;
&lt;p style="width:80%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="ModelSim up and running" src="www.j-marjanovic.io/images/modelsim_on_ubuntu19-04.png"&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="misc"></category><category term="FPGA"></category><category term="ModelSim"></category></entry><entry><title>Blog restart</title><link href="www.j-marjanovic.io/blog-restart.html" rel="alternate"></link><published>2018-09-15T19:00:00+02:00</published><updated>2018-09-15T19:00:00+02:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2018-09-15:www.j-marjanovic.io/blog-restart.html</id><summary type="html">&lt;p&gt;This blog was left dormant for quite some time now. From the last blog post
in February 2017 a lot has happened. I have moved to Hamburg, Germany, to
start a new position as FPGA Developer at MicroTCA Technology Lab at
&lt;a href="https://www.desy.de/"&gt;DESY&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is me in European XFEL tunnel:&lt;/p&gt;
&lt;p style="width:70%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Jan in European XFEL tunnel" src="www.j-marjanovic.io/images/jan_at_desy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog was left dormant for quite some time now. From the last blog post
in February 2017 a lot has happened. I have moved to Hamburg, Germany, to
start a new position as FPGA Developer at MicroTCA Technology Lab at
&lt;a href="https://www.desy.de/"&gt;DESY&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is me in European XFEL tunnel:&lt;/p&gt;
&lt;p style="width:70%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Jan in European XFEL tunnel" src="www.j-marjanovic.io/images/jan_at_desy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There are a couple of topics which I would like to explore as a hobby, and
having a blog is a nice way to organize your thoughts and outputs. Writing a
blog post at the end of the project requires someone to gather his thoughts
and to write down the conclusion.&lt;/p&gt;
&lt;p&gt;That is all for now, expect more interesting blog posts (probably focusing on
FPGA, mid-level languages as Chisel and high-level synthesis) in the future.&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Misc"></category></entry><entry><title>FOSDEM 2017</title><link href="www.j-marjanovic.io/fosdem-2017.html" rel="alternate"></link><published>2017-02-03T18:00:00+01:00</published><updated>2017-02-03T18:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2017-02-03:www.j-marjanovic.io/fosdem-2017.html</id><summary type="html">&lt;p&gt;I am writing this post from Brussels where I am attending &lt;a href="https://fosdem.org/2017/"&gt;FOSDEM 2017&lt;/a&gt;
conference.&lt;/p&gt;
&lt;p&gt;There are a lot of interesting talks, and sometimes it is quite hard to decide
on which one to go. Luckily there the talks are recorded and one can later
check also the missed ones.&lt;/p&gt;
&lt;p&gt;Here â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am writing this post from Brussels where I am attending &lt;a href="https://fosdem.org/2017/"&gt;FOSDEM 2017&lt;/a&gt;
conference.&lt;/p&gt;
&lt;p&gt;There are a lot of interesting talks, and sometimes it is quite hard to decide
on which one to go. Luckily there the talks are recorded and one can later
check also the missed ones.&lt;/p&gt;
&lt;p&gt;Here is my list of the talks I plan to attend:&lt;/p&gt;
&lt;h2&gt;Saturday&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/keynotes_welcome/"&gt;Welcome to FOSDEM 2017&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Janson&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/open_power/"&gt;Let's talk about hardware: The POWER of open&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;H.2215 (Ferrer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/lorawan/"&gt;LoRaWAN for exploring the Internet of Things&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;K.1.105 (La Fontaine)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13:00&lt;/td&gt;
&lt;td&gt;lunch&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/kernel_spi_subsystem/"&gt;Groking the Linux SPI Subsystem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UD2.120 (Chavanne)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14:00 (alternative)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/sdr_fpga/"&gt;FPGAs in SDR -- Why, when, and how to use them (with RFNoC)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;AW1.120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/hello_world/"&gt;Everything You Always Wanted to Know About "Hello, World"*&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Janson&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16:30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/iot_micropython/"&gt;Scientific MicroPython for Microcontrollers and IoT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;AW1.126&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17:00&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/libreboot/"&gt;Libreboot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;K.1.105 (La Fontaine)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18:05&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fosdem.org/2017/schedule/event/copyleft_defense/"&gt;Understanding The Complexity of Copyleft Defense&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Janson&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Sunday&lt;/h2&gt;
&lt;p&gt;On Sunday I plan to spend most of the time in &lt;a href="https://fosdem.org/2017/schedule/track/electronic_design_automation_eda/"&gt;Electronic Design Automation (EDA) devroom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a selfie of me with the famous &lt;a href="https://en.wikipedia.org/wiki/Manneken_Pis"&gt;Manneken Pis status&lt;/a&gt;:&lt;/p&gt;
&lt;p style="width:50%; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="Selfie with Manneken Pis" src="www.j-marjanovic.io/images/fosdem_2017/IMG_4898.JPG"&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Misc"></category><category term="Conference"></category></entry><entry><title>Debugging Linux start-up on Altera Cyclone V SoC with OpenOCD</title><link href="www.j-marjanovic.io/debugging-linux-start-up-on-altera-cyclone-v-soc-with-openocd.html" rel="alternate"></link><published>2016-07-12T22:00:00+02:00</published><updated>2016-07-12T22:00:00+02:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2016-07-12:www.j-marjanovic.io/debugging-linux-start-up-on-altera-cyclone-v-soc-with-openocd.html</id><summary type="html">&lt;p&gt;This blog post will show you how one can use the OpenOCD debugger with Altera
Cyclone V SoC. Altera Cyclone V SoC is a very interesting integrated circuit,
combining dual-core ARM processor and a decent FPGA, allowing a wide variety
of possibilities to partition the application between the two.&lt;/p&gt;
&lt;p&gt;Xilinx â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog post will show you how one can use the OpenOCD debugger with Altera
Cyclone V SoC. Altera Cyclone V SoC is a very interesting integrated circuit,
combining dual-core ARM processor and a decent FPGA, allowing a wide variety
of possibilities to partition the application between the two.&lt;/p&gt;
&lt;p&gt;Xilinx offers Xilinx SDK as the tool to program and debug their MicroBlaze
soft-core and ARM cores in their Zynq FPGAs. Altera on the other hand has two
different tools to program and debug their portfolio of processors. There is
Nios II EDS which provides support for Nios soft-core processor and there is 
ARM DS-5 Development Studio, which provides support for ARM cores in Altera SoCs. While I believe
DS-5 can be useful tool, unfortunately the free-as-a-beer &lt;a href="https://developer.arm.com/products/software-development-tools/ds-5-development-studio/editions/customized-editions/altera/community-edition"&gt;DS-5 Community Edition&lt;/a&gt;
only allows debugging Linux user-space applications. In order to use it, the 
Linux should be up and running in order to run gdbserver on processor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Debug options in DS-5 Altera Community Edition" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/ds5_debug_options.png" style="max-width:100%; width: auto; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;When doing initial bring-up or experimenting this may not be the case. If
there is something wrong with a kernel, a device tree or the drivers, one can
easily find himself with a non-responsive system. Even in this case the JTAG
debugger offers a side-door access to the system. This greatly simplifies
determining the cause which lead to the system halt.&lt;/p&gt;
&lt;h1&gt;Installation of OpenOCD&lt;/h1&gt;
&lt;h2&gt;OpenOCD&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://openocd.org/"&gt;OpenOCD&lt;/a&gt; is a free and open-source on-chip debugger. It
provides a link between hardware components and a command line interface,
which can be used to control and monitor the hardware over JTAG interface. It
can also be interfaced with GDB (GNU Debugger) integrated with Eclipse, to
provide a graphical way to debug programs. If you want to know more, at the
bottom of &lt;a href="http://openocd.org/documentation/"&gt;OpenOCD Documentation page&lt;/a&gt; is
a link to the presentation on FOSDEM 2006.&lt;/p&gt;
&lt;p&gt;First we need to install all needed tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libtool&lt;/span&gt; &lt;span class="n"&gt;autotools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;automake&lt;/span&gt; &lt;span class="n"&gt;libusb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="n"&gt;libhidapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we get the source code from OpenOCD SourceForge repository. I have used the
latest available commit in master, which was the one with a git tree-ish value
of &lt;code&gt;12ff09f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openocd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;openocd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nv"&gt;@eee2f562f8f2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openocd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code2&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="n"&gt;ff09f7f27a707fe42226262f55b8ce8351cbf9&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Esben&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Haabendal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;esben&lt;/span&gt;&lt;span class="nv"&gt;@haabendal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dk&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Fri&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Nov&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;cfi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strangely&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endianness&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;broken&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SoC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;implementations&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Perform all needed steps to compile the code (have a look in &lt;code&gt;INSTALL&lt;/code&gt; for
detailed instructions):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd openocd-code
aclocal
./bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the end of configure step make sure that support for Altera USB-Blaster II
and CMSIS-DAP Debugger are configured. The output should look something like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./configure

...

OpenOCD configuration summary
--------------------------------------------------
MPSSE mode of FTDI based devices        yes (auto)
Segger J-Link JTAG Programmer           yes (auto)
ST-Link JTAG Programmer                 yes (auto)
TI ICDI JTAG Programmer                 yes (auto)
Keil ULINK JTAG Programmer              yes (auto)
Altera USB-Blaster II Compatible        yes (auto)
Versaloon-Link JTAG Programmer          yes (auto)
OSBDM (JTAG only) Programmer            yes (auto)
eStick/opendous JTAG Programmer         yes (auto)
Andes JTAG Programmer                   yes (auto)
USBProg JTAG Programmer                 no
Raisonance RLink JTAG Programmer        no
Olimex ARM-JTAG-EW Programmer           no
CMSIS-DAP Compliant Debugger            yes (auto)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we just need to compile everything and install the openocd binary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make

sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;code&gt;udev&lt;/code&gt; rules for USB-Blaster&lt;/h2&gt;
&lt;p&gt;After the OpenOCD is installed, we must take care to set the correct &lt;code&gt;udev&lt;/code&gt;
rules (access permisions for USB device). As a workaround I have been chmod-ing
the &lt;code&gt;/dev/bus/usb/002/&lt;/code&gt; folder to &lt;code&gt;0666&lt;/code&gt; and that gave me correct permission
to use the USB-Blaster from Altera Quartus software.&lt;/p&gt;
&lt;p&gt;The more elegant solution is described in the comment section of &lt;a href="http://www.fpga-dev.com/altera-usb-blaster-with-
ubuntu/"&gt;ALTERA USB-BLASTER
WITH UBUNTU 14.04&lt;/a&gt;. The USB-Blaster has multiple personalities (one for FPGA JTAG and
one for ARM JTAG), the udev rule therefore needs to specify both 6010 and
6810 as the targeted devices.&lt;/p&gt;
&lt;p&gt;Create /etc/udev/rules.d/51-usbblaster.rules with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# &lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="nv"&gt;Altera&lt;/span&gt; &lt;span class="nv"&gt;USB&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;Blaster&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;SoCkit&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;usb&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,\
&lt;span class="nv"&gt;ENV&lt;/span&gt;{&lt;span class="nv"&gt;DEVTYPE&lt;/span&gt;}&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;usb_device&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,\
&lt;span class="nv"&gt;ATTR&lt;/span&gt;{&lt;span class="nv"&gt;idVendor&lt;/span&gt;}&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;09fb&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,\
&lt;span class="nv"&gt;ATTR&lt;/span&gt;{&lt;span class="nv"&gt;idProduct&lt;/span&gt;}&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;6010|6810&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,\
&lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;0666&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,\
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;bus/usb/$env{BUSNUM}/$env{DEVNUM}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,\
&lt;span class="nv"&gt;RUN&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;/bin/chmod 0666 %c&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;udev&lt;/code&gt; rules should be reloaded with the following command to take effect
immediately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;udevadm&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;First checks&lt;/h2&gt;
&lt;p&gt;Now we can try running Altera &lt;code&gt;jtagconfig&lt;/code&gt; program to check if the permissions
are OK. When the SoCkit board is attached, the output should look something
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;âžœ  ~ ~/altera/16.0/quartus/bin/jtagconfig                                                                                            
1) CV SoCKit [1-1.1]                          
  02D020DD   5CSEBA6(.|ES)/5CSEMA6/..
  4BA00477   SOCVHPS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can also try running OpenOCD:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;âžœ&lt;/span&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;openocd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;altera&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;usb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blaster2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;altera_fpgasoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;On&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Chip&lt;/span&gt; &lt;span class="n"&gt;Debugger&lt;/span&gt; &lt;span class="mf"&gt;0.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;00324&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g12ff09f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Licensed&lt;/span&gt; &lt;span class="n"&gt;under&lt;/span&gt; &lt;span class="n"&gt;GNU&lt;/span&gt; &lt;span class="n"&gt;GPL&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;
&lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="n"&gt;reports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;
&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;openocd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;doxygen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;Warn&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Adapter&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;usb_blaster&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;declare&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;transports&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;allows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;assuming&lt;/span&gt; &lt;span class="n"&gt;legacy&lt;/span&gt; &lt;span class="n"&gt;JTAG&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;autoselect&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jtag&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;kHz&lt;/span&gt;
&lt;span class="n"&gt;cycv_dbginit&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Altera&lt;/span&gt; &lt;span class="n"&gt;USB&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Blaster&lt;/span&gt; &lt;span class="n"&gt;II&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uninitialized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Loading&lt;/span&gt; &lt;span class="n"&gt;firmware&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Waiting&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;renumerate&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Waiting&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;renumerate&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Altera&lt;/span&gt; &lt;span class="n"&gt;USB&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Blaster&lt;/span&gt; &lt;span class="n"&gt;II&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Firm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t support configurable speed&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JTAG&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fpgasoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dap&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x4ba00477&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mfg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x23b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARM&lt;/span&gt; &lt;span class="n"&gt;Ltd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xba00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JTAG&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fpgasoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fpga&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="n"&gt;tap&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x02d020dd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mfg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x06e&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Altera&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x2d02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DAP&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="n"&gt;stalled&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WAIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;slowing&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DAP&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="n"&gt;stalled&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WAIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;slowing&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DAP&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="n"&gt;stalled&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WAIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;slowing&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;span class="n"&gt;Info&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fpgasoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;breakpoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;watchpoints&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gives us information that ARM core was recognized, this is therefore the
correct command to use it later with the GDB debugger.&lt;/p&gt;
&lt;h2&gt;Eclipse plug-in&lt;/h2&gt;
&lt;p&gt;Now we just have to set-up the Eclipse with the OpenOCD plug-in. I have used the
newest version of Eclipse available at the moment, Eclipse Neon.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eclipse Neon" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_neon.png" style="width:500px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gnuarmeclipse.github.io/plugins/install/"&gt;This page&lt;/a&gt; describes how to
install the OpenOCD plug-in for Eclipse, the easiest way is to drag and drop
install icon into a running instance of Eclipse.&lt;/p&gt;
&lt;p&gt;Once this is set, we can create a new project. For simpler (bare-metal)
project it would probably make sense to go with "Makefile Project with
Existing Code". For a Linux kernel debugging the plain Project will be enough.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_new_project.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_new_project_name.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;Now let's find the original Linux binary. When building kernel with Yocto, the
created file in deploy directory is &lt;code&gt;zimage&lt;/code&gt; file. This is a compressed image
with all debugging symbols stripped out. It is optimized to be used in
embedded environment. We need to find the original &lt;code&gt;vmlinux&lt;/code&gt; image before the
debugging symbols were stripped out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;âžœ  tmp git:(jethro) find . -name vmlinux                                       
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.3+gitAUTOINC+5938523338-r0/
linux-cyclone5-standard-build/arch/arm/boot/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.3+gitAUTOINC+5938523338-r0/
linux-cyclone5-standard-build/arch/arm/boot/compressed/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.3+gitAUTOINC+5938523338-r0/
linux-cyclone5-standard-build/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.4+gitAUTOINC+969478b841-r0/
linux-cyclone5-standard-build/arch/arm/boot/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.4+gitAUTOINC+969478b841-r0/
linux-cyclone5-standard-build/arch/arm/boot/compressed/vmlinux
./work/cyclone5-poky-linux-gnueabi/linux-altera/4.4+gitAUTOINC+969478b841-r0/
linux-cyclone5-standard-build/vmlinux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are various images from various different runs (and different versions
of the kernel).&lt;/p&gt;
&lt;p&gt;In Eclipse we then select: &lt;code&gt;Run -&amp;gt; Debug Configurations...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we just need to setup the correct parameters for debug. Under "Main
tab" we need to select the right Linux binary image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_main.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;Under "Debugger tab" we need to set-up the OpenOCD setting and use the correct
gdb (the one produced by Yocto):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_debugger.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;If we want to attach to a running kernel, we should un-check "Inital Reset"
and "Load executable" fields under "Startup tab".&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_startup.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;
&lt;p&gt;And we are good to go. After pressing the "Debug" button, the debugging
perspective will show up. Now we can access &lt;code&gt;__log_buf&lt;/code&gt; buffer to determine
what is stopping the kernel boot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Creation of new project in Eclipse" src="www.j-marjanovic.io/images/debugging_cyclone_soc_openocd/eclipse_debug_final.png" style="width:800px; display: block; margin-left: auto; margin-right: auto;"&gt;&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="misc"></category><category term="FPGA"></category><category term="Altera"></category><category term="Linux"></category><category term="OpenOCD"></category></entry><entry><title>Hello world</title><link href="www.j-marjanovic.io/hello-world.html" rel="alternate"></link><published>2014-11-02T13:00:00+01:00</published><updated>2014-11-02T13:00:00+01:00</updated><author><name>Jan Marjanovic</name></author><id>tag:None,2014-11-02:www.j-marjanovic.io/hello-world.html</id><summary type="html">&lt;p&gt;Hi and welcome to my blog.&lt;/p&gt;
&lt;p&gt;This is a "hello world" style post, I am curently testing pelican static blog generator.
Since I don't know how much time I will have to manage this blog I prefer that everything 
is static. If I some day stop writing this blog, at â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi and welcome to my blog.&lt;/p&gt;
&lt;p&gt;This is a "hello world" style post, I am curently testing pelican static blog generator.
Since I don't know how much time I will have to manage this blog I prefer that everything 
is static. If I some day stop writing this blog, at least there won't be any security threats
due to out-of-date web page.&lt;/p&gt;
&lt;p&gt;This blog will be about one of my biggest passions, electronics and technology in general.
Since I was a kid I was curious about electronic devices and to this day I always enjoy
taking thing appart (and sometimes also together, that is what I am being paid for). &lt;/p&gt;
&lt;p&gt;This is all for now, let's see if it "compiles"...&lt;/p&gt;&lt;script src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="Misc"></category></entry></feed>